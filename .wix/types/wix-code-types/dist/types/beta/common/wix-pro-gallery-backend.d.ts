declare module "wix-pro-gallery-backend" {
  interface Gallery {
      /**
       * Gallery ID.
       * @readonly
       */
      _id?: string | null;
      /** Gallery name. */
      name?: string | null;
      /**
       * Total number of items in the gallery.
       * @readonly
       */
      totalItems?: number | null;
      /** Media items in the gallery. */
      items?: Item[];
      /**
       * Index that determines which position a gallery is displayed on the site. <br />
       *
       * >**Note:** If you assign the same sort order index to more than one gallery, the function fails.
       */
      sortOrder?: number | null;
      /**
       * Date and time the gallery was created.
       * @readonly
       */
      _createdDate?: Date;
  }
  interface Item extends ItemMetadataOneOf {
      /** Details about the image. */
      image?: Image;
      /** Details about the video. */
      video?: Video;
      /** Details about the text file. */
      text?: Text;
      /**
       * Item ID.
       * @readonly
       */
      _id?: string | null;
      /**
       * Index that determines which position a media item is displayed in the gallery. <br />
       *
       * Default: [Epoch](https://www.epoch101.com/) timestamp. <br />
       *
       * >**Note:** If you assign the same sort order index to more than one media item in a gallery, the function fails.
       */
      sortOrder?: number | null;
      /** Item title. */
      title?: string | null;
      /** Item description. */
      description?: string | null;
      /** Link from the item. You can link to Wix sites or external URLs. */
      link?: Link;
      /** @readonly */
      type?: Type;
      /**
       * Date and time the item was created.
       * @readonly
       */
      _createdDate?: Date;
      /**
       * Date and time the item was last updated.
       * @readonly
       */
      _updatedDate?: Date;
      /** Item tags. */
      tags?: Tags;
      /**
       * item's secondary media (image or text media revealed on hover)
       * @internal
       */
      secondaryMedia?: SecondaryMedia;
  }
  /** @oneof */
  interface ItemMetadataOneOf {
      /** Details about the image. */
      image?: Image;
      /** Details about the video. */
      video?: Video;
      /** Details about the text file. */
      text?: Text;
  }
  interface Link {
      /**
       * Link type.
       * @internal
       */
      type?: LinkType;
      /** Display text of the link. */
      text?: string | null;
      /** Target URL of the link. */
      url?: string | null;
      /**
       * Whether the link opens in a new tab or window. One of:
       * * `'_blank'`: The link opens in a new tab or window.
       * * `'_self'`: The link opens in the same tab or window.
       * @internal
       */
      target?: string | null;
      /**
       * Information about the link. Reserved for internal use.
       * @internal
       */
      wixLinkData?: WixLink;
  }
  enum LinkType {
      UNDEFINED = "UNDEFINED",
      /** external link */
      EXTERNAL = "EXTERNAL",
      /** for internal usage using wixLinkData */
      INTERNAL = "INTERNAL"
  }
  /** The link object generated by panels in the editor and used by applications in Wix */
  interface WixLink extends WixLinkLinkOneOf {
      /** External link type */
      external?: ExternalLink;
      /** Page link type */
      page?: PageLink;
      /** Anchor link type */
      anchor?: AnchorLink;
      /** Dynamic page link type */
      dynamicPage?: DynamicPageLink;
      /** Document link type */
      document?: DocumentLink;
      /** Email link type */
      email?: EmailLink;
      /** Phone link type */
      phone?: PhoneLink;
      /** Address link type */
      address?: AddressLink;
      /** WhatsApp link type */
      whatsApp?: WhatsAppLink;
      /** TPA link type */
      tpaPage?: TpaPageLink;
  }
  /** @oneof */
  interface WixLinkLinkOneOf {
      /** External link type */
      external?: ExternalLink;
      /** Page link type */
      page?: PageLink;
      /** Anchor link type */
      anchor?: AnchorLink;
      /** Dynamic page link type */
      dynamicPage?: DynamicPageLink;
      /** Document link type */
      document?: DocumentLink;
      /** Email link type */
      email?: EmailLink;
      /** Phone link type */
      phone?: PhoneLink;
      /** Address link type */
      address?: AddressLink;
      /** WhatsApp link type */
      whatsApp?: WhatsAppLink;
      /** TPA link type */
      tpaPage?: TpaPageLink;
  }
  interface ExternalLink {
      /** The url of the page */
      url?: string;
      /** Where this link should open, supports _self and _blank or any name the user chooses. _self means same page, _blank means new page. */
      target?: string | null;
  }
  interface PageLink {
      /** The page id we want from the site */
      pageId?: string;
      /** Where this link should open, supports _self and _blank or any name the user chooses. _self means same page, _blank means new page. */
      target?: string | null;
      /** rel of link */
      rel?: LinkRel[];
  }
  /**
   * The 'rel' attribute of the link. The rel attribute defines the relationship between a linked resource and the current document.
   * Further reading (also about different possible rel types): https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel
   * Following are the accepted 'rel' types by Wix applications.
   */
  enum LinkRel {
      /** default (not implemented) */
      unknown_link_rel = "unknown_link_rel",
      /** Indicates that the current document's original author or publisher does not endorse the referenced document. */
      nofollow = "nofollow",
      /** Instructs the browser to navigate to the target resource without granting the new browsing context access to the document that opened it. */
      noopener = "noopener",
      /** No Referer header will be included. Additionally, has the same effect as noopener. */
      noreferrer = "noreferrer",
      /** Indicates a link that resulted from advertisements or paid placements. */
      sponsored = "sponsored"
  }
  interface AnchorLink {
      /** The name of the anchor */
      anchorName?: string;
      /** The data id (from the JSON page) of the anchor that should be used */
      anchorDataId?: string;
      /** The page id we want from the site */
      pageId?: string;
      /** rel of link */
      rel?: LinkRel[];
  }
  interface DynamicPageLink {
      /** The router that handles this link */
      routerId?: string;
      /** The path data we'd like */
      innerRoute?: string;
      /** The data id (from the JSON page) of the anchor that should be used */
      anchorDataId?: string | null;
      /** rel of link */
      rel?: LinkRel[];
  }
  interface DocumentLink {
      /** The id of the document */
      docId?: string;
      /** The name of the document for download purposes */
      name?: string | null;
      /** If this document can be indexed by scrapers, default is false */
      indexable?: boolean;
  }
  interface EmailLink {
      /** The email we will be sending a message to */
      recipient?: string;
      /** The subject of the email */
      subject?: string | null;
      /** The body of the email */
      body?: string | null;
  }
  interface PhoneLink {
      /** The phone number we want to link to */
      phoneNumber?: string;
  }
  interface AddressLink {
      /** An address that we can link to */
      address?: string;
  }
  interface WhatsAppLink {
      /** The whatsApp phone number we want to connect with */
      phoneNumber?: string;
  }
  /** Link to a TPA page */
  interface TpaPageLink {
      /** Type of item (e.g. 'wix.stores.sub_pages.product') */
      itemTypeIdentifier?: string;
      /** Id of linked item */
      itemId?: string;
      /** Id of linked page */
      pageId?: string;
      /** Id of app being linked to (AppDefId) */
      appDefinitionId?: string;
      /** The relativepath of linked page */
      path?: string;
      /** rel of link */
      rel?: LinkRel[];
  }
  enum Type {
      UNDEFINED = "UNDEFINED",
      IMAGE = "IMAGE",
      VIDEO = "VIDEO",
      TEXT = "TEXT"
  }
  interface Image {
      /** @internal */
      type?: ImageType;
      /** The image's Wix media URL in the following format: `'wix:image://v1/<uri>/<filename>#originWidth=<width>&originHeight=<height>[&watermark=<watermark_manifest_string>]'`. */
      imageInfo?: string;
      /** Focal point of the image. */
      focalPoint?: Point;
      /** Set of key-value pairs describing the media in [Exchangeable Image File format](https://en.wikipedia.org/wiki/Exif). */
      exif?: Record<string, any> | null;
      /**
       * Image compression level. <br />
       *
       * Min: `30` <br />
       * Max: `100`
       */
      quality?: number | null;
      /** [Unsharp masking](https://en.wikipedia.org/wiki/Unsharp_masking) values of the image. */
      unsharpMasking?: UnsharpMasking;
      /**
       * Whether the image is saved in secure media.
       * @internal
       */
      secure?: boolean | null;
      /**
       * When image is saved in secure media, token is generated.
       * @internal
       * @readonly
       */
      token?: string | null;
  }
  enum ImageType {
      UNDEFINED = "UNDEFINED",
      WIX_MEDIA = "WIX_MEDIA",
      EXTERNAL = "EXTERNAL"
  }
  interface Point {
      /** X-coordinate of the focal point. */
      x?: number;
      /** Y-coordinate of the focal point. */
      y?: number;
  }
  interface UnsharpMasking {
      /**
       * Unsharp masking amount. Controls the sharpening strength. <br />
       *
       * Min: `0` <br />
       * Max: `5`
       */
      amount?: number | null;
      /** Unsharp masking radius in pixels. Controls the sharpening width. */
      radius?: number | null;
      /**
       * Unsharp masking threshold. Controls how different neighboring pixels must be for shapening to apply. <br />
       *
       * Min: `0` <br />
       * Max: `1`
       */
      threshold?: number | null;
  }
  interface Video {
      type?: VideoType;
      /**
       * The video's URL. Either a Wix media URL, or a supported https external URL in the following formats:
       *
       *  Wix Media: `'wix:video://v1/6e6ea4_461425d7e7db4d5487a28e00c5ba6244/9e6ea4_461425d7e7db4d5487a28e00c5ba6277#posterUri=9e6ea4_461425d7e7db4d5487a28e00c5ba6277f000.jpg&posterWidth=960&posterHeight=540'`
       *
       * Vimeo: `'https://vimeo.com/378840916'`
       *
       * Youtube: `'https://www.youtube.com/results?search_query=uplifting+upbeat+music'`
       */
      videoInfo?: string;
      /**
       * Video duration in milliseconds - deprecated.
       * @internal
       */
      duration?: string | null;
      /** Manually defined video duration in milliseconds. */
      durationInMillis?: number | null;
  }
  enum VideoType {
      UNDEFINED = "UNDEFINED",
      WIX_MEDIA = "WIX_MEDIA",
      YOUTUBE = "YOUTUBE",
      VIMEO = "VIMEO"
  }
  interface VideoResolution {
      /** *Required.** Video URL. */
      url?: string;
      /** *Required.** Video height. */
      height?: number;
      /** *Required.** Video width. */
      width?: number;
      /**
       * Video poster. Deprecated - please use the `posters` property in the parent entity.
       * @internal
       */
      poster?: string;
      /** *Required.** Video format. For example, `mp4` or `hls`. */
      format?: string;
      /** Video quality. For example, `480p` or `720p`. */
      quality?: string | null;
      /** Video filename. */
      filename?: string | null;
  }
  interface Text {
      /** Text in HTML format. */
      html?: string | null;
      /**
       * Set of key-value pairs describing the [CSS style](https://en.wikipedia.org/wiki/CSS) of the text.
       *
       * __Note:__ The object structure is customizable. See the [List Gallery Items](https://dev.wix.com/api/rest/site-content/pro-gallery/list-gallery-items) code example for supported values.
       */
      css?: Record<string, any> | null;
      /** Reserved for internal use. */
      editorHtml?: string | null;
      /** Reserved for internal use. */
      editorFontId?: string | null;
  }
  interface Tags {
      /** List of tags assigned to the media item. */
      values?: string[];
  }
  interface SecondaryMedia extends SecondaryMediaMetadataOneOf {
      /** secondary media photo metadata (optional) */
      image?: Image;
      /** secondary media text metadata (optional) */
      text?: Text;
  }
  /** @oneof */
  interface SecondaryMediaMetadataOneOf {
      /** secondary media photo metadata (optional) */
      image?: Image;
      /** secondary media text metadata (optional) */
      text?: Text;
  }
  interface InvalidateCache extends InvalidateCacheGetByOneOf {
      /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
      metaSiteId?: string;
      /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
      siteId?: string;
      /** Invalidate by App */
      app?: App;
      /** Invalidate by page id */
      page?: InvalidateCachePage;
      /** Invalidate by URI path */
      uri?: URI;
      /** Invalidate by file (for media files such as PDFs) */
      file?: File;
      /** tell us why you're invalidating the cache. You don't need to add your app name */
      reason?: string | null;
      /** Is local DS */
      localDc?: boolean;
  }
  /** @oneof */
  interface InvalidateCacheGetByOneOf {
      /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
      metaSiteId?: string;
      /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
      siteId?: string;
      /** Invalidate by App */
      app?: App;
      /** Invalidate by page id */
      page?: InvalidateCachePage;
      /** Invalidate by URI path */
      uri?: URI;
      /** Invalidate by file (for media files such as PDFs) */
      file?: File;
  }
  interface App {
      /** The AppDefId */
      appDefId?: string;
      /** The instance Id */
      instanceId?: string;
  }
  interface InvalidateCachePage {
      /** the msid the page is on */
      metaSiteId?: string;
      /** Invalidate by Page ID */
      pageId?: string;
  }
  interface URI {
      /** the msid the URI is on */
      metaSiteId?: string;
      /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
      uriPath?: string;
  }
  interface File {
      /** the msid the file is related to */
      metaSiteId?: string;
      /** Invalidate by filename (for media files such as PDFs) */
      fileName?: string;
  }
  interface GalleryPublished {
      /**
       * id of the gallery that will be published
       * @readonly
       */
      galleryId?: string;
      isRc?: boolean;
      /** @readonly */
      newRevision?: Date;
      /** @readonly */
      oldRevision?: Date;
  }
  interface CleanDeletedGalleriesEvent {
      /** @readonly */
      instanceId?: string;
      /** @readonly */
      metaSiteId?: string;
      /** @readonly */
      htmlSiteRevision?: string;
      /** @readonly */
      timeSitePublished?: Date;
  }
  interface ProgallerypublisherPublishGalleryRequest {
      /** id of the gallery that will be published */
      galleryId?: string;
  }
  interface ProgallerypublisherPublishGalleryResponse {
  }
  interface PublishGalleryItemRequest {
      /** id of the gallery that will be published */
      galleryId?: string;
      /** id of the item that will be published */
      itemId?: string;
  }
  interface PublishGalleryItemResponse {
  }
  interface PublishGalleryItemsRequest {
      /** id of the gallery that will be published */
      galleryId?: string;
      /** ids of the items that will be published */
      itemIds?: string[];
  }
  interface PublishGalleryItemsResponse {
  }
  interface Empty {
  }
  interface HtmlSitePublished {
      /** Application instance ID */
      appInstanceId?: string;
      /** Application type */
      appType?: string;
      /** Revision */
      revision?: string;
      /** MSID */
      metaSiteId?: string | null;
      /** optional branch id if publish is done from branch */
      branchId?: string | null;
      /** The site's last transactionId */
      lastTransactionId?: string | null;
      /** A list of the site's pages */
      pages?: Page[];
      /** Site's publish date */
      publishDate?: string;
  }
  interface Page {
      /** Page's Id */
      _id?: string;
  }
  interface HtmlSiteRCPublished {
      /** Application instance ID */
      appInstanceId?: string;
      /** Revision */
      revision?: string;
      /** Optional branch Id */
      branchId?: string | null;
  }
  interface DomainEvent extends DomainEventBodyOneOf {
      /** Information about a newly-created gallery. */
      createdEvent?: EntityCreatedEvent;
      updatedEvent?: EntityUpdatedEvent;
      deletedEvent?: EntityDeletedEvent;
      actionEvent?: ActionEvent;
      /**
       * Unique event ID.
       * Allows clients to ignore duplicate webhooks.
       */
      _id?: string;
      /**
       * Assumes actions are also always typed to an entity_type
       * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
       */
      entityFqdn?: string;
      /**
       * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
       * This is although the created/updated/deleted notion is duplication of the oneof types
       * Example: created/updated/deleted/started/completed/email_opened
       */
      slug?: string;
      /** ID of the entity associated with the event. */
      entityId?: string;
      /** Event timestamp. */
      eventTime?: Date;
      /**
       * Whether the event was triggered as a result of a privacy regulation application
       * (for example, GDPR).
       */
      triggeredByAnonymizeRequest?: boolean | null;
      /** If present, indicates the action that triggered the event. */
      originatedFrom?: string | null;
      /**
       * A sequence number defining the order of updates to the underlying entity.
       * For example, given that some entity was updated at 16:00 and than again at 16:01,
       * it is guaranteed that the sequence number of the second update is strictly higher than the first.
       * As the consumer, you can use this value to ensure that you handle messages in the correct order.
       * To do so, you will need to persist this number on your end, and compare the sequence number from the
       * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
       */
      entityEventSequence?: string | null;
  }
  /** @oneof */
  interface DomainEventBodyOneOf {
      createdEvent?: EntityCreatedEvent;
      updatedEvent?: EntityUpdatedEvent;
      deletedEvent?: EntityDeletedEvent;
      actionEvent?: ActionEvent;
  }
  interface EntityCreatedEvent {
      entityAsJson?: string;
      /**
       * Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity
       * @internal
       */
      triggeredByUndelete?: boolean | null;
  }
  interface EntityUpdatedEvent {
      /**
       * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
       * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
       * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
       */
      currentEntityAsJson?: string;
      /**
       * This field is currently part of the of the EntityUpdatedEvent msg, but scala/node libraries which implements the domain events standard
       * wont populate it / have any reference to it in the API.
       * The main reason for it is that fetching the old entity from the DB will have a performance hit on an update operation so unless truly needed,
       * the developer should send only the new (current) entity.
       * An additional reason is not wanting to send this additional entity over the wire (kafka) since in some cases it can be really big
       * Developers that must reflect the old entity will have to implement their own domain event sender mechanism which will follow the DomainEvent proto message.
       * @internal
       */
      previousEntityAsJson?: string | null;
      /**
       * WIP - This property will hold both names and values of the updated fields of the entity.
       * For more details please see [adr](https://docs.google.com/document/d/1PdqsOM20Ph2HAkmx8zvUnzzk3Sekp3BR9h34wSvsRnI/edit#heading=h.phlw87mh2imx) or [issue](https://github.com/wix-private/nile-tracker/issues/363)
       * @internal
       */
      modifiedFields?: Record<string, any>;
  }
  interface EntityDeletedEvent {
      /**
       * Indicates if the entity is sent to trash-bin. only available when trash-bin is enabled
       * @internal
       */
      movedToTrash?: boolean | null;
      /** Entity that was deleted */
      deletedEntityAsJson?: string | null;
  }
  interface ActionEvent {
      bodyAsJson?: string;
  }
  interface MessageEnvelope {
      /** App instance ID. */
      instanceId?: string | null;
      /** Event type. */
      eventType?: string;
      /** The identification type and identity data. */
      identity?: IdentificationData;
      /** Stringify payload. */
      data?: string;
  }
  interface IdentificationData extends IdentificationDataIdOneOf {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
      /** @readonly */
      identityType?: WebhookIdentityType;
  }
  /** @oneof */
  interface IdentificationDataIdOneOf {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
  }
  enum WebhookIdentityType {
      UNKNOWN = "UNKNOWN",
      ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
      MEMBER = "MEMBER",
      WIX_USER = "WIX_USER",
      APP = "APP"
  }
  interface UpdateDocumentsEvent extends UpdateDocumentsEventOperationOneOf {
      /** insert/update documents */
      update?: DocumentUpdateOperation;
      /** delete by document ids */
      deleteByIds?: DeleteByIdsOperation;
      /** delete documents matching filter */
      deleteByFilter?: DeleteByFilterOperation;
      /** update documents matching filter */
      updateByFilter?: UpdateByFilterOperation;
      /** update only existing documents */
      updateExisting?: UpdateExistingOperation;
      /** application which owns documents */
      appDefId?: string | null;
      /** type of the documents */
      documentType?: string | null;
      /** language of the documents */
      language?: string | null;
      /** site documents belong to */
      msId?: string | null;
  }
  /** @oneof */
  interface UpdateDocumentsEventOperationOneOf {
      /** insert/update documents */
      update?: DocumentUpdateOperation;
      /** delete by document ids */
      deleteByIds?: DeleteByIdsOperation;
      /** delete documents matching filter */
      deleteByFilter?: DeleteByFilterOperation;
      /** update documents matching filter */
      updateByFilter?: UpdateByFilterOperation;
      /** update only existing documents */
      updateExisting?: UpdateExistingOperation;
  }
  interface DocumentUpdateOperation {
      /** documents to index or update */
      documents?: IndexDocument[];
  }
  interface IndexDocument {
      /** data bag with non-searchable fields (url, image) */
      payload?: DocumentPayload;
      /** what type of users should documents be visible to */
      exposure?: Enum;
      /** document with mandatory fields (id, title, description) and with fields specific to the type of the document */
      document?: Record<string, any> | null;
      /** what member groups is the document exposed to. Used only with GROUP_PROTECTED exposure */
      permittedMemberGroups?: string[];
      /** if true SEO is disabled for this document */
      seoHidden?: boolean | null;
      /** if true the page is a lightbox popup */
      isPopup?: boolean | null;
  }
  interface DocumentPayload {
      /** url of the page representing the document */
      url?: string | null;
      /** image which represents the document */
      documentImage?: DocumentImage;
  }
  interface DocumentImage {
      /** the name of the image */
      name?: string;
      /** the width of the image */
      width?: number;
      /** the height of the image */
      height?: number;
  }
  enum Enum {
      /** Default value. Means that permission not set */
      UNKNOWN = "UNKNOWN",
      /** Protected exposure. Exposed to members and owners */
      PROTECTED = "PROTECTED",
      /** Private exposure. Exposed to owners */
      PRIVATE = "PRIVATE",
      /** Public exposure. Visible to everyone */
      PUBLIC = "PUBLIC",
      /** Used for partial updates, to state that exposure is not changing */
      UNCHANGED = "UNCHANGED",
      /** Protected to members of permitted groups and owners */
      GROUP_PROTECTED = "GROUP_PROTECTED"
  }
  interface DeleteByIdsOperation {
      /** ids of the documents to delete */
      documentIds?: string[];
  }
  interface DeleteByFilterOperation {
      /** documents matching this filter wil be deleted. only filterable documents defined in document_type can be used for filtering */
      filter?: Record<string, any> | null;
  }
  interface UpdateByFilterOperation {
      /** documents matching this filter will be updated */
      filter?: Record<string, any> | null;
      /** partial document to apply */
      document?: IndexDocument;
  }
  interface UpdateExistingOperation {
      /** documents to update */
      documents?: IndexDocument[];
  }
  interface SearchIndexingNotification {
      /** new state of indexing for the site specified in ms_id */
      indexState?: SearchIndexingNotificationState;
      /** type of the document the notification is targeted for. Applies to all types if not provided */
      documentType?: string | null;
      /** languaInternalDocumentUpdateByFilterOperationge the notification is targeted for. Applies to all languages if not provided */
      language?: string | null;
      /** site for which notification is targeted */
      msId?: string | null;
  }
  enum SearchIndexingNotificationState {
      /** default state */
      Unknown = "Unknown",
      /** metasite does not require site search indexing */
      Off = "Off",
      /** metasite requires site search indexing */
      On = "On"
  }
  interface ListGalleriesItemsRequest {
      /** IDs of the media items to retrieve. */
      itemsId?: ItemId[];
  }
  interface ItemId {
      /** Gallery ID. */
      galleryId?: string;
      /** Item ID. */
      itemId?: string;
  }
  interface ListGalleriesItemsResponse {
      /** Retrieved media items. */
      itemsInGalleries?: ItemsInGallery[];
  }
  interface ItemsInGallery {
      /** Gallery ID. */
      galleryId?: string;
      /** Retrieved media items. */
      items?: Item[];
  }
  interface GalleryItemCreated {
      /** Created gallery item. */
      item?: Item;
  }
  interface GalleryItemUpdated {
      /** Updated gallery item. */
      updatedItem?: Item;
  }
  interface GalleryItemDeleted {
      /** ID of the deleted gallery item. */
      itemId?: string;
  }
  interface ListGalleriesRequest {
      /** Number of galleries to list. Defaults to 10. */
      itemLimit?: number | null;
      /** Number of galleries to skip in the returns. Defaults to 0. */
      offset?: number | null;
      /** Number of galleries to list. Defaults to 10. */
      limit?: number | null;
      /**
       * The set of field mask paths of gallery.
       * @internal
       */
      fields?: string[];
      /**
       * State of the galleries.
       * @internal
       */
      state?: State;
  }
  enum State {
      UNDEFINED = "UNDEFINED",
      /** The gallery in the Editor segment */
      SAVED = "SAVED",
      /** The gallery in the LiveSite segment */
      PUBLISHED = "PUBLISHED"
  }
  interface ListGalleriesResponse {
      /** Total number of galleries in the site. */
      totalGalleries?: number | null;
      /** List of galleries. Sorted by `_createdDate`. */
      galleries?: Gallery[];
  }
  interface GetGalleryRequest extends GetGalleryRequestVersionOneOf {
      /** @internal */
      htmlSiteRevision?: string | null;
      /** Gallery ID. */
      galleryId: string;
      /** Number of media items to skip in the returns. Defaults to 0. */
      itemOffset?: number | null;
      /**
       * Maximum number of media items to return. <br />
       *
       * Min: `1` <br />
       * Max: `100` <br />
       * Default: `50`
       */
      itemLimit?: number | null;
      /**
       * State of the retrieved galleries.
       * @internal
       */
      state?: State;
      /**
       * This allows us to fallback to legacy galleries until they are fully migrated. If this is not provided and a fallback is necessary, the process will fail
       * External reference. **Note:** This property is not validated by Wix.
       * @internal
       */
      externalId?: string | null;
  }
  /** @oneof */
  interface GetGalleryRequestVersionOneOf {
      /** @internal */
      htmlSiteRevision?: string | null;
  }
  interface GetGalleryResponse {
      /** Returned gallery. */
      gallery?: Gallery;
  }
  interface ListGalleryItemsRequest {
      /** Gallery ID. */
      galleryId: string;
      /** Number of media items to skip in the returns. Defaults to 0. */
      itemOffset?: number | null;
      /**
       * Maximum number of media items to return. <br />
       *
       * Min: `1` <br />
       * Max: `100` <br />
       * Default: `50`
       */
      itemLimit?: number | null;
      /**
       * State of the retrieved gallery.
       * @internal
       */
      state?: State;
  }
  interface ListGalleryItemsResponse {
      /** List of media items in the gallery. */
      items?: Item[];
  }
  interface GetGalleryItemRequest {
      /** Gallery ID. */
      galleryId: string;
      /** Item ID. */
      itemId: string;
      /**
       * State of the gallery.
       * @internal
       */
      state?: State;
  }
  interface GetGalleryItemResponse {
      /** Returned media item. */
      item?: Item;
  }
  interface CreateGalleryRequest {
      /** Gallery to create. */
      gallery?: Gallery;
      /**
       * State of the gallery to create.
       * @internal
       */
      state?: State;
      /** Gallery ID to clone from. */
      cloneFromGalleryId?: string | null;
  }
  interface CreateGalleryResponse {
      /** Created gallery. */
      gallery?: Gallery;
  }
  interface UpdateGalleryRequest {
      /** Gallery to update. */
      gallery: Gallery;
      /**
       * State of the gallery to update.
       * @internal
       */
      state?: State;
  }
  interface UpdateGalleryResponse {
      /** Updated gallery. */
      gallery?: Gallery;
  }
  interface DeleteGalleryRequest {
      /** ID of the gallery to delete. */
      galleryId: string;
      /**
       * State of the gallery to delete.
       * @internal
       */
      state?: State;
  }
  interface DeleteGalleryResponse {
      /**
       * ID of the deleted gallery.
       * @readonly
       */
      galleryId?: string;
  }
  interface DeleteGalleryItemsRequest {
      /** Gallery ID. */
      galleryId: string;
      /** ID of the media item to delete. */
      itemsIds?: string[];
      /**
       * State of the gallery.
       * @internal
       */
      state?: State;
  }
  interface DeleteGalleryItemsResponse {
      /** Gallery that previously included the deleted media item. */
      gallery?: Gallery;
  }
  interface CreateGalleryItemRequest {
      /** Gallery ID. */
      galleryId: string;
      /** Media item to create. */
      item: Item;
      /**
       * Gallery state.
       * @internal
       */
      state?: State;
  }
  interface CreateGalleryItemResponse {
      /** Created media item. */
      item?: Item;
  }
  interface CreateGalleryItemsRequest {
      /** Gallery ID. */
      galleryId?: string;
      /** Media items to create. */
      items?: Item[];
      /**
       * Gallery state.
       * @internal
       */
      state?: State;
  }
  interface CreateGalleryItemsResponse {
      /** Created media items. */
      items?: Item[];
  }
  interface UpdateGalleryItemRequest {
      /** Gallery ID. */
      galleryId: string;
      /** The information for the media item being updated.  */
      item: Item;
      /**
       * Gallery state.
       * @internal
       */
      state?: State;
  }
  interface UpdateGalleryItemResponse {
      /** Updated media item. */
      item?: Item;
  }
  interface DeleteGalleryItemRequest {
      /** Gallery ID. */
      galleryId: string;
      /** ID of the media item to delete. */
      itemId: string;
      /**
       * Gallery state.
       * @internal
       */
      state?: State;
  }
  interface DeleteGalleryItemResponse {
      /**
       * ID of the deleted media item.
       * @readonly
       */
      itemId?: string;
  }
  interface PublishGalleryRequest {
      /** ID of the gallery to publish. */
      galleryId: string;
  }
  interface PublishGalleryResponse {
      /** Published gallery. */
      gallery?: Gallery;
  }
  /**
   * Retrieves a list of galleries.
   *
   * The `listGalleries()` function returns a Promise that resolves to a list of up to 10 galleries at a given time. To list the next 10 galleries in your site's backend, use the `offset` parameter.
   * @public
   * @documentationMaturity preview
   * @param options - Options to use when getting the list of galleries.
   */
  function listGalleries(options?: ListGalleriesOptions): Promise<ListGalleriesResponse>;
  interface ListGalleriesOptions {
      /** Number of galleries to list. Defaults to 10. */
      itemLimit?: number | null;
      /** Number of galleries to skip in the returns. Defaults to 0. */
      offset?: number | null;
      /** Number of galleries to list. Defaults to 10. */
      limit?: number | null;
      /**
       * Fields to include in the response object. Setting the `fields` option filters the response object so that it only contains the specified fields.
       * @internal
       */
      fields?: string[];
      /**
       * State of the galleries.
       * @internal
       */
      state?: State;
  }
  /**
   * Gets a gallery by ID.
   *
   * The `getGallery()` function returns a Promise that resolves to a gallery whose ID matches the given ID.
   * @param galleryId - Gallery ID.
   * @public
   * @documentationMaturity preview
   * @requiredField galleryId
   * @param options - Options to use when getting the gallery.
   * @returns Returned gallery.
   */
  function getGallery(galleryId: string, options?: GetGalleryOptions): Promise<Gallery>;
  interface GetGalleryOptions extends GetGalleryRequestVersionOneOf {
      /** Number of media items to skip in the returns. Defaults to 0. */
      itemOffset?: number | null;
      /**
       * Maximum number of media items to return. <br />
       *
       * Min: `1` <br />
       * Max: `100` <br />
       * Default: `50`
       */
      itemLimit?: number | null;
      /**
       * State of the retrieved galleries.
       * @internal
       */
      state?: State;
      /**
       * This allows us to fallback to legacy galleries until they are fully migrated. If this is not provided and a fallback is necessary, the process will fail
       * External reference. **Note:** This property is not validated by Wix.
       * @internal
       */
      externalId?: string | null;
      /** @internal */
      htmlSiteRevision?: string | null;
  }
  /**
   * Retrieves a list of media items in a specified gallery.
   *
   * The `listGalleryItems()` function returns a Promise that resolves to a list of up to 100 gallery items. The gallery items are listed by `sortOrder` in descending order.
   * @param galleryId - Gallery ID.
   * @public
   * @documentationMaturity preview
   * @requiredField galleryId
   * @param options - Options to use when getting the list of gallery items.
   */
  function listGalleryItems(galleryId: string, options?: ListGalleryItemsOptions): Promise<ListGalleryItemsResponse>;
  interface ListGalleryItemsOptions {
      /** Number of media items to skip in the returns. Defaults to 0. */
      itemOffset?: number | null;
      /**
       * Maximum number of media items to return. <br />
       *
       * Min: `1` <br />
       * Max: `100` <br />
       * Default: `50`
       */
      itemLimit?: number | null;
      /**
       * State of the retrieved gallery.
       * @internal
       */
      state?: State;
  }
  /**
   * Gets a gallery item by ID.
   *
   * The `getGalleryItem()` function returns a Promise that resolves to a media item in a specified gallery whose ID matches the given ID.
   * @public
   * @documentationMaturity preview
   * @requiredField identifiers
   * @requiredField identifiers.galleryId
   * @requiredField identifiers.itemId
   * @param identifiers - Gallery ID and Item ID.
   * @returns Returned media item.
   */
  function getGalleryItem(identifiers: GetGalleryItemIdentifiers, options?: GetGalleryItemOptions): Promise<Item>;
  interface GetGalleryItemIdentifiers {
      /** Gallery ID. */
      galleryId: string;
      /** Item ID. */
      itemId: string;
  }
  interface GetGalleryItemOptions {
      /**
       * State of the gallery.
       * @internal
       */
      state?: State;
  }
  /**
   * Creates a gallery.
   *
   * The `createGallery()` function returns a Promise that resolves to a newly-created gallery after it has successfully been created.
   *
   * You can create your own gallery by providing the gallery information, or clone an existing gallery using the ID of that existing gallery. When a gallery is cloned, the newly-created gallery includes the same properties as the existing gallery except for the gallery and item IDs, sort order, and created and updated dates.
   *
   * The newly-created gallery is only available on your backend, and doesn't appear on your live site. To display your backend gallery on your live site, you need to connect it to a gallery component on your live site. To do this, import the `createGallery()` function to your page code, and write code to convert the backend gallery object to the frontend gallery component object. Once converted, the newly created backend gallery is visible on your live site. For reference, check out the code example, "Create a gallery and display it on your live site". To learn more, see [Displaying a Pro Gallery on Your Site Using the Pro Gallery Backend API](https://support.wix.com/en/article/velo-tutorial-displaying-a-pro-gallery-on-your-site-using-the-pro-gallery-backend-api).
   *
   * <blockquote class="important">
   *
   * __Important:__
   * When creating `image` items in your gallery, the images must be uploaded to the [Wix Media Manager](https://support.wix.com/en/article/wix-media-uploading-media-to-the-media-manager) first as the `imageInfo` parameter currently only supports the Wix media URL.
   *
   * </blockquote>
   *
   * #### Override permissions
   * This function is restricted and only runs if you elevate permissions using the `wix-auth` [`elevate()`](https://www.wix.com/velo/reference/wix-auth/elevate) function.
   * <blockquote class='warning'>
   *   <p><strong>Warning:</strong> Elevating a function allows it to be called by any site visitor. Exercise caution to prevent security vulnerabilities.</p>
   * </blockquote>
   * @public
   * @documentationMaturity preview
   * @requiredField options.gallery.items.image.imageInfo
   * @requiredField options.gallery.items.text.html
   * @requiredField options.gallery.items.video.videoInfo
   * @param options - Options to use when creating the gallery.
   * @adminMethod
   * @returns Created gallery.
   */
  function createGallery(options?: CreateGalleryOptions): Promise<Gallery>;
  interface CreateGalleryOptions {
      /** Gallery to create. */
      gallery?: Gallery;
      /**
       * State of the gallery to create.
       * @internal
       */
      state?: State;
      /** Gallery ID to clone from. */
      cloneFromGalleryId?: string | null;
  }
  /**
   * Updates a gallery.
   *
   * The `updateGallery()` function returns a Promise that resolves to an updated gallery. Only the fields in the `gallery` object parameter can be updated. Specify which fields to update. Unspecified fields remain the same.
   *
   * <blockquote class="important">
   *
   * __Important:__
   * When updating `image` items in your gallery, the images must be uploaded to the [Wix Media Manager](https://support.wix.com/en/article/wix-media-uploading-media-to-the-media-manager) first as the `imageInfo` parameter currently only supports the Wix media URL.
   *
   * </blockquote>
   *
   * #### Override permissions
   * This function is restricted and only runs if you elevate permissions using the `wix-auth` [`elevate()`](https://www.wix.com/velo/reference/wix-auth/elevate) function.
   * <blockquote class='warning'>
   *   <p><strong>Warning:</strong> Elevating a function allows it to be called by any site visitor. Exercise caution to prevent security vulnerabilities.</p>
   * </blockquote>
   * @public
   * @documentationMaturity preview
   * @requiredField _id
   * @requiredField gallery
   * @requiredField gallery.items.image.imageInfo
   * @requiredField gallery.items.text.html
   * @requiredField gallery.items.video.videoInfo
   * @param _id - ID of the gallery to update.
   * @param gallery - The information for the gallery being updated.
   * @adminMethod
   * @returns Updated gallery.
   */
  function updateGallery(_id: string | null, gallery: UpdateGallery, options?: UpdateGalleryOptions): Promise<Gallery>;
  interface UpdateGallery {
      /**
       * Gallery ID.
       * @readonly
       */
      _id?: string | null;
      /** Gallery name. */
      name?: string | null;
      /**
       * Total number of items in the gallery.
       * @readonly
       */
      totalItems?: number | null;
      /** Media items in the gallery. */
      items?: Item[];
      /**
       * Index that determines which position a gallery is displayed on the site. <br />
       *
       * >**Note:** If you assign the same sort order index to more than one gallery, the function fails.
       */
      sortOrder?: number | null;
      /**
       * Date and time the gallery was created.
       * @readonly
       */
      _createdDate?: Date;
  }
  interface UpdateGalleryOptions {
      /**
       * State of the gallery to update.
       * @internal
       */
      state?: State;
  }
  /**
   * Deletes a gallery.
   *
   * The `deleteGallery()` function returns a Promise that resolves to the ID of the deleted gallery. When a gallery is deleted, the deleted gallery is no longer returned when calling the [`listGalleries()`](#listgalleries) function.
   *
   * #### Override permissions
   * This function is restricted and only runs if you elevate permissions using the `wix-auth` [`elevate()`](https://www.wix.com/velo/reference/wix-auth/elevate) function.
   * <blockquote class='warning'>
   *   <p><strong>Warning:</strong> Elevating a function allows it to be called by any site visitor. Exercise caution to prevent security vulnerabilities.</p>
   * </blockquote>
   * @param galleryId - ID of the gallery to delete.
   * @public
   * @documentationMaturity preview
   * @requiredField galleryId
   * @adminMethod
   */
  function deleteGallery(galleryId: string, options?: DeleteGalleryOptions): Promise<DeleteGalleryResponse>;
  interface DeleteGalleryOptions {
      /**
       * State of the gallery to delete.
       * @internal
       */
      state?: State;
  }
  /**
   * Deletes multiple media items from a gallery.
   * @param galleryId - Gallery ID.
   * @internal
   * @documentationMaturity preview
   * @requiredField galleryId
   * @adminMethod
   */
  function deleteGalleryItems(galleryId: string, options?: DeleteGalleryItemsOptions): Promise<DeleteGalleryItemsResponse>;
  interface DeleteGalleryItemsOptions {
      /** ID of the media item to delete. */
      itemsIds?: string[];
      /**
       * State of the gallery.
       * @internal
       */
      state?: State;
  }
  /**
   * Creates a media item in a specified gallery.
   *
   * The `createGalleryItem()` function returns a Promise that resolves to a newly-created gallery item after it has successfully been created.
   *
   * <blockquote class="important">
   *
   * __Important:__
   * When creating `image` items in your gallery, the images must be uploaded to the [Wix Media Manager](https://support.wix.com/en/article/wix-media-uploading-media-to-the-media-manager) first as the `imageInfo` parameter currently only supports the Wix media URL.
   *
   * </blockquote>
   *
   * #### Override permissions
   * This function is restricted and only runs if you elevate permissions using the `wix-auth` [`elevate()`](https://www.wix.com/velo/reference/wix-auth/elevate) function.
   * <blockquote class='warning'>
   *   <p><strong>Warning:</strong> Elevating a function allows it to be called by any site visitor. Exercise caution to prevent security vulnerabilities.</p>
   * </blockquote>
   * @param galleryId - Gallery ID.
   * @param item - Media item to create.
   * @public
   * @documentationMaturity preview
   * @requiredField galleryId
   * @requiredField item
   * @requiredField item.image.imageInfo
   * @requiredField item.text.html
   * @requiredField item.video.videoInfo
   * @adminMethod
   * @returns Created media item.
   */
  function createGalleryItem(galleryId: string, item: Item, options?: CreateGalleryItemOptions): Promise<Item>;
  interface CreateGalleryItemOptions {
      /**
       * Gallery state.
       * @internal
       */
      state?: State;
  }
  /**
   * Updates a media item in a specified gallery.
   *
   * The `updateGalleryItem()` function returns a Promise that resolves to an updated gallery item. Only the fields in the `item` object parameter can be updated. Specify which fields to update. Unspecified fields remain the same.
   *
   * <blockquote class="important">
   *
   * __Important:__
   * When updating `image` items in your gallery, the images must be uploaded to the [Wix Media Manager](https://support.wix.com/en/article/wix-media-uploading-media-to-the-media-manager) first as the `imageInfo` parameter currently only supports the Wix media URL.
   *
   * </blockquote>
   *
   * #### Override permissions
   * This function is restricted and only runs if you elevate permissions using the `wix-auth` [`elevate()`](https://www.wix.com/velo/reference/wix-auth/elevate) function.
   * <blockquote class='warning'>
   *   <p><strong>Warning:</strong> Elevating a function allows it to be called by any site visitor. Exercise caution to prevent security vulnerabilities.</p>
   * </blockquote>
   * @public
   * @documentationMaturity preview
   * @requiredField identifiers
   * @requiredField identifiers.galleryId
   * @requiredField identifiers.itemId
   * @requiredField item
   * @requiredField item.image.imageInfo
   * @requiredField item.text.html
   * @requiredField item.video.videoInfo
   * @param item - The information for the gallery item being updated.
   * @param identifiers - Gallery ID and Item ID.
   * @adminMethod
   * @returns Updated media item.
   */
  function updateGalleryItem(identifiers: UpdateGalleryItemIdentifiers, item: UpdateGalleryItem, options?: UpdateGalleryItemOptions): Promise<Item>;
  interface UpdateGalleryItemIdentifiers {
      /** ID of the gallery containing the item to update.  */
      galleryId: string;
      /**
       * ID of the item to update.
       * @readonly
       */
      itemId?: string | null;
  }
  interface UpdateGalleryItem {
      /** Details about the image. */
      image?: Image;
      /** Details about the video. */
      video?: Video;
      /** Details about the text file. */
      text?: Text;
      /**
       * Item ID.
       * @readonly
       */
      _id?: string | null;
      /**
       * Index that determines which position a media item is displayed in the gallery. <br />
       *
       * Default: [Epoch](https://www.epoch101.com/) timestamp. <br />
       *
       * >**Note:** If you assign the same sort order index to more than one media item in a gallery, the function fails.
       */
      sortOrder?: number | null;
      /** Item title. */
      title?: string | null;
      /** Item description. */
      description?: string | null;
      /** Link from the item. You can link to Wix sites or external URLs. */
      link?: Link;
      /** @readonly */
      type?: Type;
      /**
       * Date and time the item was created.
       * @readonly
       */
      _createdDate?: Date;
      /**
       * Date and time the item was last updated.
       * @readonly
       */
      _updatedDate?: Date;
      /** Item tags. */
      tags?: Tags;
      /**
       * item's secondary media (image or text media revealed on hover)
       * @internal
       */
      secondaryMedia?: SecondaryMedia;
  }
  interface UpdateGalleryItemOptions {
      /**
       * Gallery state.
       * @internal
       */
      state?: State;
  }
  /**
   * Deletes a media item from a gallery.
   *
   * The `deleteGalleryItem()` function returns a Promise that resolves to the ID of the deleted gallery item. When a gallery item is deleted, the deleted gallery item is no longer returned when calling the [`listGalleryItems()`](#listgalleryitems) function.
   *
   * #### Override permissions
   * This function is restricted and only runs if you elevate permissions using the `wix-auth` [`elevate()`](https://www.wix.com/velo/reference/wix-auth/elevate) function.
   * <blockquote class='warning'>
   *   <p><strong>Warning:</strong> Elevating a function allows it to be called by any site visitor. Exercise caution to prevent security vulnerabilities.</p>
   * </blockquote>
   * @public
   * @documentationMaturity preview
   * @requiredField identifiers
   * @requiredField identifiers.galleryId
   * @requiredField identifiers.itemId
   * @param identifiers - Gallery ID and Item ID.
   * @adminMethod
   */
  function deleteGalleryItem(identifiers: DeleteGalleryItemIdentifiers, options?: DeleteGalleryItemOptions): Promise<DeleteGalleryItemResponse>;
  interface DeleteGalleryItemIdentifiers {
      /** Gallery ID. */
      galleryId: string;
      /** ID of the media item to delete. */
      itemId: string;
  }
  interface DeleteGalleryItemOptions {
      /**
       * Gallery state.
       * @internal
       */
      state?: State;
  }
  /**
   * Publish gallery
   * The changes that been done in SAVED state will be applied in the PUBLISHED gallery
   * @param galleryId - ID of the gallery to publish.
   * @internal
   * @documentationMaturity preview
   * @requiredField galleryId
   * @adminMethod
   */
  function publishGallery(galleryId: string): Promise<PublishGalleryResponse>;
  
  type proGalleryV2Gallery_universal_d_Gallery = Gallery;
  type proGalleryV2Gallery_universal_d_Item = Item;
  type proGalleryV2Gallery_universal_d_ItemMetadataOneOf = ItemMetadataOneOf;
  type proGalleryV2Gallery_universal_d_Link = Link;
  type proGalleryV2Gallery_universal_d_LinkType = LinkType;
  const proGalleryV2Gallery_universal_d_LinkType: typeof LinkType;
  type proGalleryV2Gallery_universal_d_WixLink = WixLink;
  type proGalleryV2Gallery_universal_d_WixLinkLinkOneOf = WixLinkLinkOneOf;
  type proGalleryV2Gallery_universal_d_ExternalLink = ExternalLink;
  type proGalleryV2Gallery_universal_d_PageLink = PageLink;
  type proGalleryV2Gallery_universal_d_LinkRel = LinkRel;
  const proGalleryV2Gallery_universal_d_LinkRel: typeof LinkRel;
  type proGalleryV2Gallery_universal_d_AnchorLink = AnchorLink;
  type proGalleryV2Gallery_universal_d_DynamicPageLink = DynamicPageLink;
  type proGalleryV2Gallery_universal_d_DocumentLink = DocumentLink;
  type proGalleryV2Gallery_universal_d_EmailLink = EmailLink;
  type proGalleryV2Gallery_universal_d_PhoneLink = PhoneLink;
  type proGalleryV2Gallery_universal_d_AddressLink = AddressLink;
  type proGalleryV2Gallery_universal_d_WhatsAppLink = WhatsAppLink;
  type proGalleryV2Gallery_universal_d_TpaPageLink = TpaPageLink;
  type proGalleryV2Gallery_universal_d_Type = Type;
  const proGalleryV2Gallery_universal_d_Type: typeof Type;
  type proGalleryV2Gallery_universal_d_Image = Image;
  type proGalleryV2Gallery_universal_d_ImageType = ImageType;
  const proGalleryV2Gallery_universal_d_ImageType: typeof ImageType;
  type proGalleryV2Gallery_universal_d_Point = Point;
  type proGalleryV2Gallery_universal_d_UnsharpMasking = UnsharpMasking;
  type proGalleryV2Gallery_universal_d_Video = Video;
  type proGalleryV2Gallery_universal_d_VideoType = VideoType;
  const proGalleryV2Gallery_universal_d_VideoType: typeof VideoType;
  type proGalleryV2Gallery_universal_d_VideoResolution = VideoResolution;
  type proGalleryV2Gallery_universal_d_Text = Text;
  type proGalleryV2Gallery_universal_d_Tags = Tags;
  type proGalleryV2Gallery_universal_d_SecondaryMedia = SecondaryMedia;
  type proGalleryV2Gallery_universal_d_SecondaryMediaMetadataOneOf = SecondaryMediaMetadataOneOf;
  type proGalleryV2Gallery_universal_d_InvalidateCache = InvalidateCache;
  type proGalleryV2Gallery_universal_d_InvalidateCacheGetByOneOf = InvalidateCacheGetByOneOf;
  type proGalleryV2Gallery_universal_d_App = App;
  type proGalleryV2Gallery_universal_d_InvalidateCachePage = InvalidateCachePage;
  type proGalleryV2Gallery_universal_d_URI = URI;
  type proGalleryV2Gallery_universal_d_File = File;
  type proGalleryV2Gallery_universal_d_GalleryPublished = GalleryPublished;
  type proGalleryV2Gallery_universal_d_CleanDeletedGalleriesEvent = CleanDeletedGalleriesEvent;
  type proGalleryV2Gallery_universal_d_ProgallerypublisherPublishGalleryRequest = ProgallerypublisherPublishGalleryRequest;
  type proGalleryV2Gallery_universal_d_ProgallerypublisherPublishGalleryResponse = ProgallerypublisherPublishGalleryResponse;
  type proGalleryV2Gallery_universal_d_PublishGalleryItemRequest = PublishGalleryItemRequest;
  type proGalleryV2Gallery_universal_d_PublishGalleryItemResponse = PublishGalleryItemResponse;
  type proGalleryV2Gallery_universal_d_PublishGalleryItemsRequest = PublishGalleryItemsRequest;
  type proGalleryV2Gallery_universal_d_PublishGalleryItemsResponse = PublishGalleryItemsResponse;
  type proGalleryV2Gallery_universal_d_Empty = Empty;
  type proGalleryV2Gallery_universal_d_HtmlSitePublished = HtmlSitePublished;
  type proGalleryV2Gallery_universal_d_Page = Page;
  type proGalleryV2Gallery_universal_d_HtmlSiteRCPublished = HtmlSiteRCPublished;
  type proGalleryV2Gallery_universal_d_DomainEvent = DomainEvent;
  type proGalleryV2Gallery_universal_d_DomainEventBodyOneOf = DomainEventBodyOneOf;
  type proGalleryV2Gallery_universal_d_EntityCreatedEvent = EntityCreatedEvent;
  type proGalleryV2Gallery_universal_d_EntityUpdatedEvent = EntityUpdatedEvent;
  type proGalleryV2Gallery_universal_d_EntityDeletedEvent = EntityDeletedEvent;
  type proGalleryV2Gallery_universal_d_ActionEvent = ActionEvent;
  type proGalleryV2Gallery_universal_d_MessageEnvelope = MessageEnvelope;
  type proGalleryV2Gallery_universal_d_IdentificationData = IdentificationData;
  type proGalleryV2Gallery_universal_d_IdentificationDataIdOneOf = IdentificationDataIdOneOf;
  type proGalleryV2Gallery_universal_d_WebhookIdentityType = WebhookIdentityType;
  const proGalleryV2Gallery_universal_d_WebhookIdentityType: typeof WebhookIdentityType;
  type proGalleryV2Gallery_universal_d_UpdateDocumentsEvent = UpdateDocumentsEvent;
  type proGalleryV2Gallery_universal_d_UpdateDocumentsEventOperationOneOf = UpdateDocumentsEventOperationOneOf;
  type proGalleryV2Gallery_universal_d_DocumentUpdateOperation = DocumentUpdateOperation;
  type proGalleryV2Gallery_universal_d_IndexDocument = IndexDocument;
  type proGalleryV2Gallery_universal_d_DocumentPayload = DocumentPayload;
  type proGalleryV2Gallery_universal_d_DocumentImage = DocumentImage;
  type proGalleryV2Gallery_universal_d_Enum = Enum;
  const proGalleryV2Gallery_universal_d_Enum: typeof Enum;
  type proGalleryV2Gallery_universal_d_DeleteByIdsOperation = DeleteByIdsOperation;
  type proGalleryV2Gallery_universal_d_DeleteByFilterOperation = DeleteByFilterOperation;
  type proGalleryV2Gallery_universal_d_UpdateByFilterOperation = UpdateByFilterOperation;
  type proGalleryV2Gallery_universal_d_UpdateExistingOperation = UpdateExistingOperation;
  type proGalleryV2Gallery_universal_d_SearchIndexingNotification = SearchIndexingNotification;
  type proGalleryV2Gallery_universal_d_SearchIndexingNotificationState = SearchIndexingNotificationState;
  const proGalleryV2Gallery_universal_d_SearchIndexingNotificationState: typeof SearchIndexingNotificationState;
  type proGalleryV2Gallery_universal_d_ListGalleriesItemsRequest = ListGalleriesItemsRequest;
  type proGalleryV2Gallery_universal_d_ItemId = ItemId;
  type proGalleryV2Gallery_universal_d_ListGalleriesItemsResponse = ListGalleriesItemsResponse;
  type proGalleryV2Gallery_universal_d_ItemsInGallery = ItemsInGallery;
  type proGalleryV2Gallery_universal_d_GalleryItemCreated = GalleryItemCreated;
  type proGalleryV2Gallery_universal_d_GalleryItemUpdated = GalleryItemUpdated;
  type proGalleryV2Gallery_universal_d_GalleryItemDeleted = GalleryItemDeleted;
  type proGalleryV2Gallery_universal_d_ListGalleriesRequest = ListGalleriesRequest;
  type proGalleryV2Gallery_universal_d_State = State;
  const proGalleryV2Gallery_universal_d_State: typeof State;
  type proGalleryV2Gallery_universal_d_ListGalleriesResponse = ListGalleriesResponse;
  type proGalleryV2Gallery_universal_d_GetGalleryRequest = GetGalleryRequest;
  type proGalleryV2Gallery_universal_d_GetGalleryRequestVersionOneOf = GetGalleryRequestVersionOneOf;
  type proGalleryV2Gallery_universal_d_GetGalleryResponse = GetGalleryResponse;
  type proGalleryV2Gallery_universal_d_ListGalleryItemsRequest = ListGalleryItemsRequest;
  type proGalleryV2Gallery_universal_d_ListGalleryItemsResponse = ListGalleryItemsResponse;
  type proGalleryV2Gallery_universal_d_GetGalleryItemRequest = GetGalleryItemRequest;
  type proGalleryV2Gallery_universal_d_GetGalleryItemResponse = GetGalleryItemResponse;
  type proGalleryV2Gallery_universal_d_CreateGalleryRequest = CreateGalleryRequest;
  type proGalleryV2Gallery_universal_d_CreateGalleryResponse = CreateGalleryResponse;
  type proGalleryV2Gallery_universal_d_UpdateGalleryRequest = UpdateGalleryRequest;
  type proGalleryV2Gallery_universal_d_UpdateGalleryResponse = UpdateGalleryResponse;
  type proGalleryV2Gallery_universal_d_DeleteGalleryRequest = DeleteGalleryRequest;
  type proGalleryV2Gallery_universal_d_DeleteGalleryResponse = DeleteGalleryResponse;
  type proGalleryV2Gallery_universal_d_DeleteGalleryItemsRequest = DeleteGalleryItemsRequest;
  type proGalleryV2Gallery_universal_d_DeleteGalleryItemsResponse = DeleteGalleryItemsResponse;
  type proGalleryV2Gallery_universal_d_CreateGalleryItemRequest = CreateGalleryItemRequest;
  type proGalleryV2Gallery_universal_d_CreateGalleryItemResponse = CreateGalleryItemResponse;
  type proGalleryV2Gallery_universal_d_CreateGalleryItemsRequest = CreateGalleryItemsRequest;
  type proGalleryV2Gallery_universal_d_CreateGalleryItemsResponse = CreateGalleryItemsResponse;
  type proGalleryV2Gallery_universal_d_UpdateGalleryItemRequest = UpdateGalleryItemRequest;
  type proGalleryV2Gallery_universal_d_UpdateGalleryItemResponse = UpdateGalleryItemResponse;
  type proGalleryV2Gallery_universal_d_DeleteGalleryItemRequest = DeleteGalleryItemRequest;
  type proGalleryV2Gallery_universal_d_DeleteGalleryItemResponse = DeleteGalleryItemResponse;
  type proGalleryV2Gallery_universal_d_PublishGalleryRequest = PublishGalleryRequest;
  type proGalleryV2Gallery_universal_d_PublishGalleryResponse = PublishGalleryResponse;
  const proGalleryV2Gallery_universal_d_listGalleries: typeof listGalleries;
  type proGalleryV2Gallery_universal_d_ListGalleriesOptions = ListGalleriesOptions;
  const proGalleryV2Gallery_universal_d_getGallery: typeof getGallery;
  type proGalleryV2Gallery_universal_d_GetGalleryOptions = GetGalleryOptions;
  const proGalleryV2Gallery_universal_d_listGalleryItems: typeof listGalleryItems;
  type proGalleryV2Gallery_universal_d_ListGalleryItemsOptions = ListGalleryItemsOptions;
  const proGalleryV2Gallery_universal_d_getGalleryItem: typeof getGalleryItem;
  type proGalleryV2Gallery_universal_d_GetGalleryItemIdentifiers = GetGalleryItemIdentifiers;
  type proGalleryV2Gallery_universal_d_GetGalleryItemOptions = GetGalleryItemOptions;
  const proGalleryV2Gallery_universal_d_createGallery: typeof createGallery;
  type proGalleryV2Gallery_universal_d_CreateGalleryOptions = CreateGalleryOptions;
  const proGalleryV2Gallery_universal_d_updateGallery: typeof updateGallery;
  type proGalleryV2Gallery_universal_d_UpdateGallery = UpdateGallery;
  type proGalleryV2Gallery_universal_d_UpdateGalleryOptions = UpdateGalleryOptions;
  const proGalleryV2Gallery_universal_d_deleteGallery: typeof deleteGallery;
  type proGalleryV2Gallery_universal_d_DeleteGalleryOptions = DeleteGalleryOptions;
  const proGalleryV2Gallery_universal_d_deleteGalleryItems: typeof deleteGalleryItems;
  type proGalleryV2Gallery_universal_d_DeleteGalleryItemsOptions = DeleteGalleryItemsOptions;
  const proGalleryV2Gallery_universal_d_createGalleryItem: typeof createGalleryItem;
  type proGalleryV2Gallery_universal_d_CreateGalleryItemOptions = CreateGalleryItemOptions;
  const proGalleryV2Gallery_universal_d_updateGalleryItem: typeof updateGalleryItem;
  type proGalleryV2Gallery_universal_d_UpdateGalleryItemIdentifiers = UpdateGalleryItemIdentifiers;
  type proGalleryV2Gallery_universal_d_UpdateGalleryItem = UpdateGalleryItem;
  type proGalleryV2Gallery_universal_d_UpdateGalleryItemOptions = UpdateGalleryItemOptions;
  const proGalleryV2Gallery_universal_d_deleteGalleryItem: typeof deleteGalleryItem;
  type proGalleryV2Gallery_universal_d_DeleteGalleryItemIdentifiers = DeleteGalleryItemIdentifiers;
  type proGalleryV2Gallery_universal_d_DeleteGalleryItemOptions = DeleteGalleryItemOptions;
  const proGalleryV2Gallery_universal_d_publishGallery: typeof publishGallery;
  namespace proGalleryV2Gallery_universal_d {
    export {
      proGalleryV2Gallery_universal_d_Gallery as Gallery,
      proGalleryV2Gallery_universal_d_Item as Item,
      proGalleryV2Gallery_universal_d_ItemMetadataOneOf as ItemMetadataOneOf,
      proGalleryV2Gallery_universal_d_Link as Link,
      proGalleryV2Gallery_universal_d_LinkType as LinkType,
      proGalleryV2Gallery_universal_d_WixLink as WixLink,
      proGalleryV2Gallery_universal_d_WixLinkLinkOneOf as WixLinkLinkOneOf,
      proGalleryV2Gallery_universal_d_ExternalLink as ExternalLink,
      proGalleryV2Gallery_universal_d_PageLink as PageLink,
      proGalleryV2Gallery_universal_d_LinkRel as LinkRel,
      proGalleryV2Gallery_universal_d_AnchorLink as AnchorLink,
      proGalleryV2Gallery_universal_d_DynamicPageLink as DynamicPageLink,
      proGalleryV2Gallery_universal_d_DocumentLink as DocumentLink,
      proGalleryV2Gallery_universal_d_EmailLink as EmailLink,
      proGalleryV2Gallery_universal_d_PhoneLink as PhoneLink,
      proGalleryV2Gallery_universal_d_AddressLink as AddressLink,
      proGalleryV2Gallery_universal_d_WhatsAppLink as WhatsAppLink,
      proGalleryV2Gallery_universal_d_TpaPageLink as TpaPageLink,
      proGalleryV2Gallery_universal_d_Type as Type,
      proGalleryV2Gallery_universal_d_Image as Image,
      proGalleryV2Gallery_universal_d_ImageType as ImageType,
      proGalleryV2Gallery_universal_d_Point as Point,
      proGalleryV2Gallery_universal_d_UnsharpMasking as UnsharpMasking,
      proGalleryV2Gallery_universal_d_Video as Video,
      proGalleryV2Gallery_universal_d_VideoType as VideoType,
      proGalleryV2Gallery_universal_d_VideoResolution as VideoResolution,
      proGalleryV2Gallery_universal_d_Text as Text,
      proGalleryV2Gallery_universal_d_Tags as Tags,
      proGalleryV2Gallery_universal_d_SecondaryMedia as SecondaryMedia,
      proGalleryV2Gallery_universal_d_SecondaryMediaMetadataOneOf as SecondaryMediaMetadataOneOf,
      proGalleryV2Gallery_universal_d_InvalidateCache as InvalidateCache,
      proGalleryV2Gallery_universal_d_InvalidateCacheGetByOneOf as InvalidateCacheGetByOneOf,
      proGalleryV2Gallery_universal_d_App as App,
      proGalleryV2Gallery_universal_d_InvalidateCachePage as InvalidateCachePage,
      proGalleryV2Gallery_universal_d_URI as URI,
      proGalleryV2Gallery_universal_d_File as File,
      proGalleryV2Gallery_universal_d_GalleryPublished as GalleryPublished,
      proGalleryV2Gallery_universal_d_CleanDeletedGalleriesEvent as CleanDeletedGalleriesEvent,
      proGalleryV2Gallery_universal_d_ProgallerypublisherPublishGalleryRequest as ProgallerypublisherPublishGalleryRequest,
      proGalleryV2Gallery_universal_d_ProgallerypublisherPublishGalleryResponse as ProgallerypublisherPublishGalleryResponse,
      proGalleryV2Gallery_universal_d_PublishGalleryItemRequest as PublishGalleryItemRequest,
      proGalleryV2Gallery_universal_d_PublishGalleryItemResponse as PublishGalleryItemResponse,
      proGalleryV2Gallery_universal_d_PublishGalleryItemsRequest as PublishGalleryItemsRequest,
      proGalleryV2Gallery_universal_d_PublishGalleryItemsResponse as PublishGalleryItemsResponse,
      proGalleryV2Gallery_universal_d_Empty as Empty,
      proGalleryV2Gallery_universal_d_HtmlSitePublished as HtmlSitePublished,
      proGalleryV2Gallery_universal_d_Page as Page,
      proGalleryV2Gallery_universal_d_HtmlSiteRCPublished as HtmlSiteRCPublished,
      proGalleryV2Gallery_universal_d_DomainEvent as DomainEvent,
      proGalleryV2Gallery_universal_d_DomainEventBodyOneOf as DomainEventBodyOneOf,
      proGalleryV2Gallery_universal_d_EntityCreatedEvent as EntityCreatedEvent,
      proGalleryV2Gallery_universal_d_EntityUpdatedEvent as EntityUpdatedEvent,
      proGalleryV2Gallery_universal_d_EntityDeletedEvent as EntityDeletedEvent,
      proGalleryV2Gallery_universal_d_ActionEvent as ActionEvent,
      proGalleryV2Gallery_universal_d_MessageEnvelope as MessageEnvelope,
      proGalleryV2Gallery_universal_d_IdentificationData as IdentificationData,
      proGalleryV2Gallery_universal_d_IdentificationDataIdOneOf as IdentificationDataIdOneOf,
      proGalleryV2Gallery_universal_d_WebhookIdentityType as WebhookIdentityType,
      proGalleryV2Gallery_universal_d_UpdateDocumentsEvent as UpdateDocumentsEvent,
      proGalleryV2Gallery_universal_d_UpdateDocumentsEventOperationOneOf as UpdateDocumentsEventOperationOneOf,
      proGalleryV2Gallery_universal_d_DocumentUpdateOperation as DocumentUpdateOperation,
      proGalleryV2Gallery_universal_d_IndexDocument as IndexDocument,
      proGalleryV2Gallery_universal_d_DocumentPayload as DocumentPayload,
      proGalleryV2Gallery_universal_d_DocumentImage as DocumentImage,
      proGalleryV2Gallery_universal_d_Enum as Enum,
      proGalleryV2Gallery_universal_d_DeleteByIdsOperation as DeleteByIdsOperation,
      proGalleryV2Gallery_universal_d_DeleteByFilterOperation as DeleteByFilterOperation,
      proGalleryV2Gallery_universal_d_UpdateByFilterOperation as UpdateByFilterOperation,
      proGalleryV2Gallery_universal_d_UpdateExistingOperation as UpdateExistingOperation,
      proGalleryV2Gallery_universal_d_SearchIndexingNotification as SearchIndexingNotification,
      proGalleryV2Gallery_universal_d_SearchIndexingNotificationState as SearchIndexingNotificationState,
      proGalleryV2Gallery_universal_d_ListGalleriesItemsRequest as ListGalleriesItemsRequest,
      proGalleryV2Gallery_universal_d_ItemId as ItemId,
      proGalleryV2Gallery_universal_d_ListGalleriesItemsResponse as ListGalleriesItemsResponse,
      proGalleryV2Gallery_universal_d_ItemsInGallery as ItemsInGallery,
      proGalleryV2Gallery_universal_d_GalleryItemCreated as GalleryItemCreated,
      proGalleryV2Gallery_universal_d_GalleryItemUpdated as GalleryItemUpdated,
      proGalleryV2Gallery_universal_d_GalleryItemDeleted as GalleryItemDeleted,
      proGalleryV2Gallery_universal_d_ListGalleriesRequest as ListGalleriesRequest,
      proGalleryV2Gallery_universal_d_State as State,
      proGalleryV2Gallery_universal_d_ListGalleriesResponse as ListGalleriesResponse,
      proGalleryV2Gallery_universal_d_GetGalleryRequest as GetGalleryRequest,
      proGalleryV2Gallery_universal_d_GetGalleryRequestVersionOneOf as GetGalleryRequestVersionOneOf,
      proGalleryV2Gallery_universal_d_GetGalleryResponse as GetGalleryResponse,
      proGalleryV2Gallery_universal_d_ListGalleryItemsRequest as ListGalleryItemsRequest,
      proGalleryV2Gallery_universal_d_ListGalleryItemsResponse as ListGalleryItemsResponse,
      proGalleryV2Gallery_universal_d_GetGalleryItemRequest as GetGalleryItemRequest,
      proGalleryV2Gallery_universal_d_GetGalleryItemResponse as GetGalleryItemResponse,
      proGalleryV2Gallery_universal_d_CreateGalleryRequest as CreateGalleryRequest,
      proGalleryV2Gallery_universal_d_CreateGalleryResponse as CreateGalleryResponse,
      proGalleryV2Gallery_universal_d_UpdateGalleryRequest as UpdateGalleryRequest,
      proGalleryV2Gallery_universal_d_UpdateGalleryResponse as UpdateGalleryResponse,
      proGalleryV2Gallery_universal_d_DeleteGalleryRequest as DeleteGalleryRequest,
      proGalleryV2Gallery_universal_d_DeleteGalleryResponse as DeleteGalleryResponse,
      proGalleryV2Gallery_universal_d_DeleteGalleryItemsRequest as DeleteGalleryItemsRequest,
      proGalleryV2Gallery_universal_d_DeleteGalleryItemsResponse as DeleteGalleryItemsResponse,
      proGalleryV2Gallery_universal_d_CreateGalleryItemRequest as CreateGalleryItemRequest,
      proGalleryV2Gallery_universal_d_CreateGalleryItemResponse as CreateGalleryItemResponse,
      proGalleryV2Gallery_universal_d_CreateGalleryItemsRequest as CreateGalleryItemsRequest,
      proGalleryV2Gallery_universal_d_CreateGalleryItemsResponse as CreateGalleryItemsResponse,
      proGalleryV2Gallery_universal_d_UpdateGalleryItemRequest as UpdateGalleryItemRequest,
      proGalleryV2Gallery_universal_d_UpdateGalleryItemResponse as UpdateGalleryItemResponse,
      proGalleryV2Gallery_universal_d_DeleteGalleryItemRequest as DeleteGalleryItemRequest,
      proGalleryV2Gallery_universal_d_DeleteGalleryItemResponse as DeleteGalleryItemResponse,
      proGalleryV2Gallery_universal_d_PublishGalleryRequest as PublishGalleryRequest,
      proGalleryV2Gallery_universal_d_PublishGalleryResponse as PublishGalleryResponse,
      proGalleryV2Gallery_universal_d_listGalleries as listGalleries,
      proGalleryV2Gallery_universal_d_ListGalleriesOptions as ListGalleriesOptions,
      proGalleryV2Gallery_universal_d_getGallery as getGallery,
      proGalleryV2Gallery_universal_d_GetGalleryOptions as GetGalleryOptions,
      proGalleryV2Gallery_universal_d_listGalleryItems as listGalleryItems,
      proGalleryV2Gallery_universal_d_ListGalleryItemsOptions as ListGalleryItemsOptions,
      proGalleryV2Gallery_universal_d_getGalleryItem as getGalleryItem,
      proGalleryV2Gallery_universal_d_GetGalleryItemIdentifiers as GetGalleryItemIdentifiers,
      proGalleryV2Gallery_universal_d_GetGalleryItemOptions as GetGalleryItemOptions,
      proGalleryV2Gallery_universal_d_createGallery as createGallery,
      proGalleryV2Gallery_universal_d_CreateGalleryOptions as CreateGalleryOptions,
      proGalleryV2Gallery_universal_d_updateGallery as updateGallery,
      proGalleryV2Gallery_universal_d_UpdateGallery as UpdateGallery,
      proGalleryV2Gallery_universal_d_UpdateGalleryOptions as UpdateGalleryOptions,
      proGalleryV2Gallery_universal_d_deleteGallery as deleteGallery,
      proGalleryV2Gallery_universal_d_DeleteGalleryOptions as DeleteGalleryOptions,
      proGalleryV2Gallery_universal_d_deleteGalleryItems as deleteGalleryItems,
      proGalleryV2Gallery_universal_d_DeleteGalleryItemsOptions as DeleteGalleryItemsOptions,
      proGalleryV2Gallery_universal_d_createGalleryItem as createGalleryItem,
      proGalleryV2Gallery_universal_d_CreateGalleryItemOptions as CreateGalleryItemOptions,
      proGalleryV2Gallery_universal_d_updateGalleryItem as updateGalleryItem,
      proGalleryV2Gallery_universal_d_UpdateGalleryItemIdentifiers as UpdateGalleryItemIdentifiers,
      proGalleryV2Gallery_universal_d_UpdateGalleryItem as UpdateGalleryItem,
      proGalleryV2Gallery_universal_d_UpdateGalleryItemOptions as UpdateGalleryItemOptions,
      proGalleryV2Gallery_universal_d_deleteGalleryItem as deleteGalleryItem,
      proGalleryV2Gallery_universal_d_DeleteGalleryItemIdentifiers as DeleteGalleryItemIdentifiers,
      proGalleryV2Gallery_universal_d_DeleteGalleryItemOptions as DeleteGalleryItemOptions,
      proGalleryV2Gallery_universal_d_publishGallery as publishGallery,
    };
  }
  
  export { proGalleryV2Gallery_universal_d as proGallery };
}
