declare module "wix-entitlements-backend" {
  const __debug$2: {
      verboseLogging: {
          on: () => boolean;
          off: () => boolean;
      };
  };
  interface Balance {
      /**
       * The entitlement from which the balance has originated
       * @readonly
       */
      poolId?: string;
      /** Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision */
      revision?: string | null;
      /**
       * The owner of this balance
       * @readonly
       */
      beneficiary?: IdentificationData$2;
      /** Balance for the entitlement */
      balance?: BalanceAmount;
  }
  interface IdentificationData$2 extends IdentificationDataIdOneOf$2 {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
      /** ID of of a contact in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system. */
      contactId?: string | null;
      /**
       * @internal
       * @readonly
       */
      identityType?: IdentityType$2;
  }
  /** @oneof */
  interface IdentificationDataIdOneOf$2 {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
  }
  enum IdentityType$2 {
      UNKNOWN = "UNKNOWN",
      ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
      MEMBER = "MEMBER",
      WIX_USER = "WIX_USER",
      APP = "APP"
  }
  interface BalanceAmount {
      /**
       * Represents the sum of the available credits for the entitlement
       * @readonly
       */
      available?: string;
  }
  interface GetBalanceRequest {
      /** The id of the entitlement */
      poolId: string;
  }
  interface GetBalanceResponse {
      /** Requested balance */
      balance?: Balance;
  }
  interface ChangeBalanceRequest extends ChangeBalanceRequestOperationOneOf {
      /** Applies the delta to the current balance. If 0, change won't be performed, but the transaction is still going to be reported */
      adjustOptions?: AdjustOptions;
      /** Sets the balance to any amount. If the set amount is the same as the current balance no action will be performed */
      setOptions?: SetOptions;
      /**
       * Sets the initial balance to any amount. Initializes the entitlement account. Must be the first operation performed on the account and only called once
       * All subsequent SetInitialOperations will fail.
       */
      setInitialOptions?: SetInitialOptions;
      /** The id of the entitlement */
      poolId: string;
      /** Unique value generated by the client which the service uses to recognize subsequent retries of the same request */
      idempotencyKey: string;
      /** Party that initiated this change. Could be the site use, the entitlement owner or the beneficiary */
      instructingParty?: IdentificationData$2;
      /** The operation to perform on the balance */
      type?: Type$1;
  }
  /** @oneof */
  interface ChangeBalanceRequestOperationOneOf {
      /** Applies the delta to the current balance. If 0, change won't be performed, but the transaction is still going to be reported */
      adjustOptions?: AdjustOptions;
      /** Sets the balance to any amount. If the set amount is the same as the current balance no action will be performed */
      setOptions?: SetOptions;
      /**
       * Sets the initial balance to any amount. Initializes the entitlement account. Must be the first operation performed on the account and only called once
       * All subsequent SetInitialOperations will fail.
       */
      setInitialOptions?: SetInitialOptions;
  }
  enum Type$1 {
      UNKNOWN_OPERATION = "UNKNOWN_OPERATION",
      ADJUST = "ADJUST",
      SET = "SET",
      SET_INITIAL = "SET_INITIAL"
  }
  interface AdjustOptions {
      /** Change the available balance by the provided amount. Can be negative and positive values. */
      amount?: string;
      /** Beneficiary of the operation */
      beneficiary?: IdentificationData$2;
      /** Related item id to the balance change */
      itemId?: string | null;
  }
  interface SetOptions {
      /** Set the available balance to the provided amount. */
      amount?: string;
      /** Beneficiary of the transaction */
      beneficiary?: IdentificationData$2;
  }
  interface SetInitialOptions {
      /** Set the available balance to the provided amount. */
      amount?: string;
      /** Beneficiary of the transaction */
      beneficiary?: IdentificationData$2;
  }
  interface ChangeBalanceResponse {
      /** Changed balance */
      balance?: Balance;
      /** Id of the resulting transaction from balance change operation */
      transactionId?: string | null;
  }
  interface BalanceChanged {
      /** Balance after change */
      balance?: Balance;
      /** Transaction that made the change */
      lastTransaction?: Transaction$1;
  }
  interface Transaction$1 {
      /** @readonly */
      _id?: string | null;
      /**
       * Represents the time the transaction was created
       * @readonly
       */
      _createdDate?: Date;
      /**
       * The entitlement from which the balance was changed
       * @readonly
       */
      poolId?: string;
      /**
       * The item for which the balance was changed, used only for records
       * @readonly
       */
      itemId?: string | null;
      /**
       * Amount to adjust the balance with. Can be negative.
       * @readonly
       */
      amount?: string;
      /**
       * The type defines different functionalities. Use DEBIT_AVAILABLE for normal balance debiting.
       * @readonly
       */
      type?: TransactionType$1;
      /**
       * Generated idempotency key from the client when making a change to the balance.
       * @readonly
       */
      idempotencyKey?: string;
      /**
       * Free format string
       * @readonly
       */
      reason?: string | null;
      /**
       * The identity that benefited from this transaction
       * @readonly
       */
      beneficiary?: IdentificationData$2;
      /**
       * Related transaction id. For example - for a reservation cancellation transaction, the related transaction is the redemption itself.
       * @readonly
       */
      relatedTransactionId?: string | null;
      /**
       * The identity that created this transaction
       * @readonly
       */
      instructingParty?: IdentificationData$2;
      /**
       * status of the transaction
       * @readonly
       */
      status?: TransactionStatus$1;
  }
  enum TransactionType$1 {
      UNDEFINED = "UNDEFINED",
      /** Debits the AVAILABLE balance */
      DEBIT_AVAILABLE = "DEBIT_AVAILABLE",
      /** Moves the balance from AVAILABLE to RESERVED */
      RESERVE = "RESERVE",
      /** Debits the RESERVED balance */
      RELEASE_RESERVATION = "RELEASE_RESERVATION",
      /** Moves the balance back from RESERVED to AVAILABLE */
      CANCEL_RESERVATION = "CANCEL_RESERVATION",
      /** Credits the AVAILABLE balance */
      CREDIT_AVAILABLE = "CREDIT_AVAILABLE",
      /** Transaction type used for reporting free item usage */
      NO_CHANGE = "NO_CHANGE"
  }
  enum TransactionStatus$1 {
      UNDEFINED = "UNDEFINED",
      /** Transaction is pending. This is the initial status of the transaction. Once the balance is updated, the transaction will become COMPLETED. If the balance update fails, the transaction will become FAILED. */
      PENDING = "PENDING",
      /** Transaction is completed */
      COMPLETED = "COMPLETED",
      /** Transaction is failed */
      FAILED = "FAILED"
  }
  interface BalanceReachedZero {
      /** Balance after change */
      balance?: Balance;
      /** Transaction that made the change */
      lastTransaction?: Transaction$1;
  }
  interface TransactionAlreadyExists {
      /** The id of the transaction which already exists with the same idempotency key */
      transactionId?: string;
  }
  interface NotEnoughBalance$1 {
      /** Current balance */
      balance?: BalanceAmount;
      /**
       * The requested amount
       * @readonly
       */
      requested?: string;
  }
  interface RevertBalanceChangeRequest {
      /** Reverts the change to the balance made by the provided transaction */
      transactionId: string;
      /** Unique value generated by the client which the service uses to recognize subsequent retries of the same request */
      idempotencyKey: string;
      /** Party that initiated this change. Could be the site use, the entitlement owner or the beneficiary */
      instructingParty?: IdentificationData$2;
  }
  interface RevertBalanceChangeResponse {
      /** Id of the created reverse transaction */
      transactionId?: string | null;
  }
  interface ChangeAlreadyReverted {
      /** The id of the transaction which was already reverted */
      originalTransactionId?: string;
      /** The id of the transaction which reverted the original transaction */
      revertedTransactionId?: string;
  }
  interface ChangeIsNotReversible {
      /** The id of the transaction which cannot be reverted */
      transactionId?: string;
  }
  /**
   * Get the balance in the entitlement.
   *
   * This function is not a universal function and runs only on the backend.
   * @param poolId - The id of the entitlement
   * @internal
   * @documentationMaturity preview
   * @requiredField poolId
   * @adminMethod
   * @returns Requested balance
   */
  function getBalance(poolId: string): Promise<Balance>;
  /**
   * Change balance using one of these operations:
   * ADJUST
   * SET
   * SET_INITIAL
   *
   * This function is not a universal function and runs only on the backend.
   * @param poolId - The id of the entitlement
   * @param idempotencyKey - Unique value generated by the client which the service uses to recognize subsequent retries of the same request
   * @internal
   * @documentationMaturity preview
   * @requiredField idempotencyKey
   * @requiredField poolId
   * @adminMethod
   */
  function changeBalance(poolId: string, idempotencyKey: string, options?: ChangeBalanceOptions): Promise<ChangeBalanceResponse>;
  interface ChangeBalanceOptions extends ChangeBalanceRequestOperationOneOf {
      /** Party that initiated this change. Could be the site use, the entitlement owner or the beneficiary */
      instructingParty?: IdentificationData$2;
      /** The operation to perform on the balance */
      type?: Type$1;
      /** Applies the delta to the current balance. If 0, change won't be performed, but the transaction is still going to be reported */
      adjustOptions?: AdjustOptions;
      /** Sets the balance to any amount. If the set amount is the same as the current balance no action will be performed */
      setOptions?: SetOptions;
      /**
       * Sets the initial balance to any amount. Initializes the entitlement account. Must be the first operation performed on the account and only called once
       * All subsequent SetInitialOperations will fail.
       */
      setInitialOptions?: SetInitialOptions;
  }
  /**
   * Reverts balance change done with ChangeBalance
   *
   * This function is not a universal function and runs only on the backend.
   * @param transactionId - Reverts the change to the balance made by the provided transaction
   * @param idempotencyKey - Unique value generated by the client which the service uses to recognize subsequent retries of the same request
   * @internal
   * @documentationMaturity preview
   * @requiredField idempotencyKey
   * @requiredField transactionId
   * @adminMethod
   */
  function revertBalanceChange(transactionId: string, idempotencyKey: string, options?: RevertBalanceChangeOptions): Promise<RevertBalanceChangeResponse>;
  interface RevertBalanceChangeOptions {
      /** Party that initiated this change. Could be the site use, the entitlement owner or the beneficiary */
      instructingParty?: IdentificationData$2;
  }
  
  type entitlementsV1Balance_universal_d_Balance = Balance;
  type entitlementsV1Balance_universal_d_BalanceAmount = BalanceAmount;
  type entitlementsV1Balance_universal_d_GetBalanceRequest = GetBalanceRequest;
  type entitlementsV1Balance_universal_d_GetBalanceResponse = GetBalanceResponse;
  type entitlementsV1Balance_universal_d_ChangeBalanceRequest = ChangeBalanceRequest;
  type entitlementsV1Balance_universal_d_ChangeBalanceRequestOperationOneOf = ChangeBalanceRequestOperationOneOf;
  type entitlementsV1Balance_universal_d_AdjustOptions = AdjustOptions;
  type entitlementsV1Balance_universal_d_SetOptions = SetOptions;
  type entitlementsV1Balance_universal_d_SetInitialOptions = SetInitialOptions;
  type entitlementsV1Balance_universal_d_ChangeBalanceResponse = ChangeBalanceResponse;
  type entitlementsV1Balance_universal_d_BalanceChanged = BalanceChanged;
  type entitlementsV1Balance_universal_d_BalanceReachedZero = BalanceReachedZero;
  type entitlementsV1Balance_universal_d_TransactionAlreadyExists = TransactionAlreadyExists;
  type entitlementsV1Balance_universal_d_RevertBalanceChangeRequest = RevertBalanceChangeRequest;
  type entitlementsV1Balance_universal_d_RevertBalanceChangeResponse = RevertBalanceChangeResponse;
  type entitlementsV1Balance_universal_d_ChangeAlreadyReverted = ChangeAlreadyReverted;
  type entitlementsV1Balance_universal_d_ChangeIsNotReversible = ChangeIsNotReversible;
  const entitlementsV1Balance_universal_d_getBalance: typeof getBalance;
  const entitlementsV1Balance_universal_d_changeBalance: typeof changeBalance;
  type entitlementsV1Balance_universal_d_ChangeBalanceOptions = ChangeBalanceOptions;
  const entitlementsV1Balance_universal_d_revertBalanceChange: typeof revertBalanceChange;
  type entitlementsV1Balance_universal_d_RevertBalanceChangeOptions = RevertBalanceChangeOptions;
  namespace entitlementsV1Balance_universal_d {
    export {
      __debug$2 as __debug,
      entitlementsV1Balance_universal_d_Balance as Balance,
      IdentificationData$2 as IdentificationData,
      IdentificationDataIdOneOf$2 as IdentificationDataIdOneOf,
      IdentityType$2 as IdentityType,
      entitlementsV1Balance_universal_d_BalanceAmount as BalanceAmount,
      entitlementsV1Balance_universal_d_GetBalanceRequest as GetBalanceRequest,
      entitlementsV1Balance_universal_d_GetBalanceResponse as GetBalanceResponse,
      entitlementsV1Balance_universal_d_ChangeBalanceRequest as ChangeBalanceRequest,
      entitlementsV1Balance_universal_d_ChangeBalanceRequestOperationOneOf as ChangeBalanceRequestOperationOneOf,
      Type$1 as Type,
      entitlementsV1Balance_universal_d_AdjustOptions as AdjustOptions,
      entitlementsV1Balance_universal_d_SetOptions as SetOptions,
      entitlementsV1Balance_universal_d_SetInitialOptions as SetInitialOptions,
      entitlementsV1Balance_universal_d_ChangeBalanceResponse as ChangeBalanceResponse,
      entitlementsV1Balance_universal_d_BalanceChanged as BalanceChanged,
      Transaction$1 as Transaction,
      TransactionType$1 as TransactionType,
      TransactionStatus$1 as TransactionStatus,
      entitlementsV1Balance_universal_d_BalanceReachedZero as BalanceReachedZero,
      entitlementsV1Balance_universal_d_TransactionAlreadyExists as TransactionAlreadyExists,
      NotEnoughBalance$1 as NotEnoughBalance,
      entitlementsV1Balance_universal_d_RevertBalanceChangeRequest as RevertBalanceChangeRequest,
      entitlementsV1Balance_universal_d_RevertBalanceChangeResponse as RevertBalanceChangeResponse,
      entitlementsV1Balance_universal_d_ChangeAlreadyReverted as ChangeAlreadyReverted,
      entitlementsV1Balance_universal_d_ChangeIsNotReversible as ChangeIsNotReversible,
      entitlementsV1Balance_universal_d_getBalance as getBalance,
      entitlementsV1Balance_universal_d_changeBalance as changeBalance,
      entitlementsV1Balance_universal_d_ChangeBalanceOptions as ChangeBalanceOptions,
      entitlementsV1Balance_universal_d_revertBalanceChange as revertBalanceChange,
      entitlementsV1Balance_universal_d_RevertBalanceChangeOptions as RevertBalanceChangeOptions,
    };
  }
  
  const __debug$1: {
      verboseLogging: {
          on: () => boolean;
          off: () => boolean;
      };
  };
  /**
   * This represents the current state of what the beneficiary is entitled to. Entitlement is always created in the image of the template.
   * + Entitlement supports basic lifecycle, can be paused or resumed. E.g. for recurring entitlements they should be active only when the underlying subscription is active. Redemption would fail on a non-active entitlement
   * + Entitlement may be recurring. Recurrence is driven by an external system (e.g. pricing plans order billing cycle) via the grant method of this API.
   * + Depending on user input updates to entitlement templates may cascade to entitlements in 3 different ways:
   * + On Provision
   * + On Grant
   * + Immediately
   *
   * Entitlements much like their templates are also grouped together in packages which are identified by their id.
   * When entitlements are provisioned from either a single template or a template package they are always assigned to a new entitlement package (id provided by the caller). This reference
   * is then used throughout the lifecycle of the entitlement.
   */
  interface Entitlement {
      /**
       * Entitlement ID
       * @readonly
       */
      _id?: string | null;
      /** Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision */
      revision?: string | null;
      /**
       * Represents the time this Entitlement was created
       * @readonly
       */
      _createdDate?: Date;
      /**
       * Represents the time this Entitlement was last updated
       * @readonly
       */
      _updatedDate?: Date;
      /**
       * Template that this entitlement was created from
       * @readonly
       */
      templateId?: string;
      /**
       * Template package from which this entitlement was provisioned from
       * @readonly
       */
      templatePackageId?: string | null;
      /**
       * Package that this entitlement belongs to
       * @readonly
       */
      packageId?: string;
      /**
       * Status of entitlement
       * @readonly
       */
      status?: EntitlementStatus;
      /** Who is getting the entitlement */
      beneficiary?: IdentificationData$1;
      /** Items and policies how the entitlement works */
      details?: EntitlementDetails;
      /**
       * Name of the entitlement template that this Entitlement was provisioned from
       * @readonly
       */
      name?: string;
      /**
       * ID of the app that this entitlement belongs to
       * @readonly
       */
      appId?: string;
  }
  enum EntitlementStatus {
      UNDEFINED = "UNDEFINED",
      ACTIVE = "ACTIVE",
      PAUSED = "PAUSED",
      ENDED = "ENDED"
  }
  interface IdentificationData$1 extends IdentificationDataIdOneOf$1 {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
      /** ID of of a contact in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system. */
      contactId?: string | null;
      /**
       * @internal
       * @readonly
       */
      identityType?: IdentityType$1;
  }
  /** @oneof */
  interface IdentificationDataIdOneOf$1 {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
  }
  enum IdentityType$1 {
      UNKNOWN = "UNKNOWN",
      ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
      MEMBER = "MEMBER",
      WIX_USER = "WIX_USER",
      APP = "APP"
  }
  interface EntitlementDetails {
      /** A set of benefits that share the credit pool and policies of the entitlement */
      benefits?: Benefit[];
      /** Settings that control the behavior of the credit pool. If this value is left empty, then the entitlement is unlimited and items should not have prices */
      creditConfiguration?: CreditConfiguration;
      /** Defines entitlement eligibility. Default policy for all items, but may be overridden by a specific item */
      policyExpression?: PolicyExpression;
      /** Additional info that was set by the Entitlement Provider */
      additionalData?: Record<string, any> | null;
      /** Entitlement provider */
      provider?: Provider;
  }
  /** Groups items that share the same credit pool and policies */
  interface Benefit {
      /** A unique identifier for the group. May be empty, but only one group can have an empty key */
      benefitKey?: string;
      /** A set of items that share the credit pool and policies of the entitlement */
      items?: Item[];
      /** Price of the item expressed in credits */
      price?: string | null;
      /** Overrides the default policies in Entitlement Data */
      policyExpression?: PolicyExpression;
      /** Additional info that was set by the Entitlement Provider */
      additionalData?: Record<string, any> | null;
  }
  /**
   * Represents anything that an external system exposes as an entitlement. It could be a specific event, a booking session, or even a physical good.
   * `category` is used to identify the type of the item and id is used to uniquely identify it within the category. The `name` is used for display purposes only.
   * For example, if the item is a blog post, then the category could be "post" and the id could be the post id.
   */
  interface Item {
      /** External item identifier */
      _id?: string;
      /** Item category. Discriminates between different types of items. E.g. posts, groups etc. */
      category?: string | null;
      /** Name of the item */
      name?: string | null;
  }
  interface PolicyExpression extends PolicyExpressionExpressionOneOf {
      /** Negates the expression */
      operatorNotOptions?: PolicyExpressionNot;
      /** Combines the expressions with an `AND` operator */
      operatorAndOptions?: PolicyExpressionAnd;
      /** Combines the expressions with an `OR` operator */
      operatorOrOptions?: PolicyExpressionOr;
      /** Represents the specific policy */
      policyOptions?: Policy;
      type?: PolicyExpressionType;
  }
  /** @oneof */
  interface PolicyExpressionExpressionOneOf {
      /** Negates the expression */
      operatorNotOptions?: PolicyExpressionNot;
      /** Combines the expressions with an `AND` operator */
      operatorAndOptions?: PolicyExpressionAnd;
      /** Combines the expressions with an `OR` operator */
      operatorOrOptions?: PolicyExpressionOr;
      /** Represents the specific policy */
      policyOptions?: Policy;
  }
  enum PolicyExpressionType {
      UNKNOWN = "UNKNOWN",
      OPERATOR_NOT = "OPERATOR_NOT",
      OPERATOR_AND = "OPERATOR_AND",
      OPERATOR_OR = "OPERATOR_OR",
      POLICY = "POLICY"
  }
  interface PolicyExpressionNot {
      /** Expression that is negated */
      expression?: PolicyExpression;
  }
  interface PolicyExpressionAnd {
      /** Expressions that are combined with an `AND` operator */
      expressions?: PolicyExpression[];
  }
  interface PolicyExpressionOr {
      /** Expressions that are combined with an `OR` operator */
      expressions?: PolicyExpression[];
  }
  interface Policy extends PolicyPolicyOneOf {
      /** Policy which defines entitlement eligibility on particular days or hours */
      fixedIntervalOptions?: FixedIntervalPolicy;
      /** Policy which limits entitlement usage per time unit */
      rateLimitedOptions?: RateLimitedPolicy;
      /** Custom policy definition that is controlled by the CustomPolicyProvider */
      customOptions?: CustomPolicy;
      /** Policy type */
      type?: Type;
  }
  /** @oneof */
  interface PolicyPolicyOneOf {
      /** Policy which defines entitlement eligibility on particular days or hours */
      fixedIntervalOptions?: FixedIntervalPolicy;
      /** Policy which limits entitlement usage per time unit */
      rateLimitedOptions?: RateLimitedPolicy;
      /** Custom policy definition that is controlled by the CustomPolicyProvider */
      customOptions?: CustomPolicy;
  }
  enum Type {
      UNKNOWN = "UNKNOWN",
      FIXED_INTERVAL = "FIXED_INTERVAL",
      RATE_LIMITED = "RATE_LIMITED",
      CUSTOM = "CUSTOM"
  }
  interface FixedIntervalPolicy {
      /** Weekday that this interval starts from. If this is set then to_week_day must also be set */
      fromWeekDay?: WeekDay;
      /** Weekday that this interval ends at. If this is set then from_week_day must also be set */
      toWeekDay?: WeekDay;
      /** Hour that this interval starts from. If this is set then to_hour must also be set */
      fromHour?: number | null;
      /** Hour that this interval ends at. If this is set then from_hour must also be set */
      toHour?: number | null;
      /** Minute that this interval starts from. If this is set then to_minute must also be set */
      fromMinute?: number | null;
      /** Minute that this interval ends at. If this is set then from_minute must also be set */
      toMinute?: number | null;
  }
  enum WeekDay {
      UNKNOWN = "UNKNOWN",
      MONDAY = "MONDAY",
      TUESDAY = "TUESDAY",
      WEDNESDAY = "WEDNESDAY",
      THURSDAY = "THURSDAY",
      FRIDAY = "FRIDAY",
      SATURDAY = "SATURDAY",
      SUNDAY = "SUNDAY"
  }
  interface RateLimitedPolicy extends RateLimitedPolicyPeriodOneOf {
      /** Policy which defines entitlement eligibility on particular days or hours */
      fixedIntervalOptions?: FixedIntervalPolicy;
      /** Defines how many times it's allowed to consume a item over the period */
      times?: number;
      /** Type of period */
      type?: RateLimitedPolicyType;
  }
  /** @oneof */
  interface RateLimitedPolicyPeriodOneOf {
      /** Policy which defines entitlement eligibility on particular days or hours */
      fixedIntervalOptions?: FixedIntervalPolicy;
  }
  enum RateLimitedPolicyType {
      UNKNOWN = "UNKNOWN",
      FIXED_INTERVAL = "FIXED_INTERVAL",
      PER_CYCLE = "PER_CYCLE"
  }
  /** Custom policy as implemented by the Entitlement Policy Provider */
  interface CustomPolicy {
      /** References a specific custom policy on the provider's system */
      _id?: string | null;
      /** Custom policy provider id */
      appId?: string | null;
      /** Additional info for this custom policy. It's going to be passed to the policy provider during eligibility checks */
      additionalData?: Record<string, any> | null;
  }
  interface CreditConfiguration {
      /** The total amount of credits available for this entitlement */
      amount?: string;
      /** Unused credits are rolled over to the new cycle */
      rollOver?: boolean;
  }
  interface Provider {
      /** AppId of a provider defined in a dev center which implements this entitlement custom lifecycle and redeem logic */
      appId?: string;
      /** Type of the entitlement, giving information to the SPI implementer so it knows what kind of entitlement it is */
      type?: string;
  }
  interface CreateEntitlementRequest {
      /** Entitlement to be created */
      entitlement: Entitlement;
  }
  interface CreateEntitlementResponse {
      /** The created Entitlement */
      entitlement?: Entitlement;
  }
  interface GetEntitlementRequest {
      /** Id of the Entitlement to retrieve */
      entitlementId: string;
  }
  interface GetEntitlementResponse {
      /** The retrieved Entitlement */
      entitlement?: Entitlement;
  }
  interface UpdateEntitlementRequest {
      /** Entitlement to be updated, may be partial */
      entitlement: Entitlement;
      /**
       * Explicit list of fields to update
       * @internal
       */
      fieldMask?: string[];
  }
  interface UpdateEntitlementResponse {
      /** The updated Entitlement */
      entitlement?: Entitlement;
  }
  interface DeleteEntitlementRequest {
      /** Id of the Entitlement to delete */
      entitlementId: string;
      /** The revision of the Entitlement */
      revision?: string;
  }
  interface DeleteEntitlementResponse {
  }
  /** In case template_id is provided should test if it's part of a package. If it is, reject the request */
  interface ProvisionEntitlementsRequest {
      /** Reference of the template that is used to provision the entitlements */
      templateReference: EntitlementTemplateReference;
      /** The main beneficiary of the entitlement */
      beneficiary: IdentificationData$1;
      /** Package that the provisioned entitlement is part of */
      packageId: string;
  }
  interface EntitlementTemplateReference extends EntitlementTemplateReferenceIdOneOf {
      /** Individual entitlement template */
      templateId?: string;
      /** Package of entitlement templates */
      templatePackageId?: string;
  }
  /** @oneof */
  interface EntitlementTemplateReferenceIdOneOf {
      /** Individual entitlement template */
      templateId?: string;
      /** Package of entitlement templates */
      templatePackageId?: string;
  }
  interface ProvisionEntitlementsResponse {
      /** Created entitlements as a result of provision */
      entitlements?: Entitlement[];
  }
  interface PackageAlreadyExists {
      /** Package id that already has entitlements */
      packageId?: string;
  }
  /** Updates the entitlement according to its template and grants credits */
  interface GrantEntitlementRequest {
      /** Package of entitlements to grant. Package id should be the same that was used to provision entitlements. */
      packageId: string;
  }
  interface GrantEntitlementResponse {
      /** Updated entitlements as a result of the grant */
      entitlements?: Entitlement[];
  }
  interface EntitlementGranted {
      /** Entitlement which has been granted */
      entitlement?: Entitlement;
  }
  interface QueryEntitlementsRequest {
      /** WQL expression */
      query: CursorQuery$1;
  }
  interface CursorQuery$1 extends CursorQueryPagingMethodOneOf$1 {
      /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
      cursorPaging?: CursorPaging$1;
      /**
       * Filter object in the following format:
       * `"filter" : {
       * "fieldName1": "value1",
       * "fieldName2":{"$operator":"value2"}
       * }`
       * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
       */
      filter?: Record<string, any> | null;
      /**
       * Sort object in the following format:
       * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
       */
      sort?: Sorting$1[];
  }
  /** @oneof */
  interface CursorQueryPagingMethodOneOf$1 {
      /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
      cursorPaging?: CursorPaging$1;
  }
  interface Sorting$1 {
      /** Name of the field to sort by. */
      fieldName?: string;
      /** Sort order. */
      order?: SortOrder$1;
  }
  enum SortOrder$1 {
      ASC = "ASC",
      DESC = "DESC"
  }
  interface CursorPaging$1 {
      /** Number of items to load. */
      limit?: number | null;
      /**
       * Pointer to the next or previous page in the list of results.
       *
       * You can get the relevant cursor token
       * from the `pagingMetadata` object in the previous call's response.
       * Not relevant for the first request.
       */
      cursor?: string | null;
  }
  interface QueryEntitlementsResponse {
      /** The retrieved Entitlements */
      entitlements?: Entitlement[];
      /** Paging information */
      metadata?: CursorPagingMetadata$1;
  }
  interface CursorPagingMetadata$1 {
      /** Number of items returned in the response. */
      count?: number | null;
      /** Offset that was requested. */
      cursors?: Cursors$1;
      /**
       * Indicates if there are more results after the current page.
       * If `true`, another page of results can be retrieved.
       * If `false`, this is the last page.
       */
      hasNext?: boolean | null;
  }
  interface Cursors$1 {
      /** Cursor pointing to next page in the list of results. */
      next?: string | null;
      /** Cursor pointing to previous page in the list of results. */
      prev?: string | null;
  }
  interface PauseEntitlementRequest {
      /** Package of entitlements */
      packageId: string;
  }
  interface PauseEntitlementResponse {
      /** Entitlements that were updated as a result of this request */
      entitlements?: Entitlement[];
  }
  interface EntitlementPaused {
      /** Entitlement which has been paused */
      entitlement?: Entitlement;
  }
  interface ResumeEntitlementRequest {
      /** Package of entitlements */
      packageId: string;
  }
  interface ResumeEntitlementResponse {
      /** Entitlements that were updated as a result of this request */
      entitlements?: Entitlement[];
  }
  interface EntitlementResumed {
      /** Entitlement which has been resumed */
      entitlement?: Entitlement;
  }
  interface EndEntitlementRequest {
      /** Package of entitlements */
      packageId: string;
  }
  interface EndEntitlementResponse {
      /** Entitlements that were updated as a result of this request */
      entitlements?: Entitlement[];
  }
  interface EntitlementEnded {
      /** Entitlement which has been ended */
      entitlement?: Entitlement;
  }
  interface RedeemEntitlementRequest {
      /** Id of the entitlement that is being redeemed from */
      entitlementId: string;
      /** Reference of the item that is being redeemed */
      itemReference?: ItemReference;
      /** If provided it will force the redemption to be done from the specific benefit instead of the first eligible one */
      benefitKey?: string | null;
      /** Number of of items to redeem */
      count?: number;
      /**
       * Date at which the item will be used. Target date does not necessarily equal the redemption date. Credits are redeemed immediately.
       * This date is only used for validations that may be performed by policy providers
       */
      targetDate?: Date;
      /** Idempotency key */
      idempotencyKey: string;
      /** Additional info */
      additionalData?: Record<string, any> | null;
      /** Beneficiary of the entitlement. If not provided, will use the identity in the context */
      beneficiary?: IdentificationData$1;
  }
  interface ItemReference {
      /** Id of the item */
      _id?: string;
      /** Item category */
      category?: string | null;
  }
  interface RedeemEntitlementResponse {
      /** Id of the resulting transaction */
      transactionId?: string;
  }
  interface EntitlementRedeemed {
      /** Entitlement which has been redeemed */
      entitlement?: Entitlement;
      /** Details of the redemption */
      redemptionDetails?: RedemptionDetails;
  }
  interface RedemptionDetails {
      /** Id of the redemption transaction */
      transactionId?: string;
      /** Reference of the item that is being redeemed */
      itemReference?: ItemReference;
      /** Number of of items to redeem */
      itemCount?: number;
      /**
       * Date at which the item will be used. Target date does not necessarily equal the redemption date. Credits are redeemed immediately.
       * This date is only used for validations that may be performed by entitlement providers
       */
      targetDate?: Date;
      /** Idempotency key */
      idempotencyKey?: string;
      /** Additional info provided during redemption */
      additionalData?: Record<string, any> | null;
      /** Beneficiary of the entitlement */
      beneficiary?: IdentificationData$1;
  }
  interface NotEnoughBalance {
      /** Entitlement ID */
      entitlementId?: string;
      /** Item reference */
      itemReference?: ItemReference;
      /** Price of the item expressed in credits */
      availableBalance?: string;
      /** Price of the item expressed in credits */
      requestedBalance?: string;
  }
  interface PolicyExpressionEvaluatedToFalse {
      /** Entitlement ID */
      entitlementId?: string;
      /** Item reference */
      itemReference?: ItemReference;
  }
  interface EntitlementNotActive {
      /** Entitlement ID */
      entitlementId?: string;
      /** Entitlement status */
      entitlementStatus?: EntitlementStatus;
  }
  interface EntitlementAlreadyRedeemed {
      /** Entitlement ID */
      entitlementId?: string;
      /** Transaction that was used to redeem the entitlement */
      transactionId?: string;
      /** Idempotency key of the request that failed */
      idempotencyKey?: string;
  }
  interface ReserveEntitlementRequest {
      /** Id of the entitlement that is being redeemed from */
      entitlementId: string;
      /** Reference of the item that is being redeemed */
      itemReference?: ItemReference;
      /** If provided it will force the redemption to be done from the specific benefit instead of the first eligible one */
      benefitKey?: string | null;
      /** Number of items to redeem */
      count?: number;
      /**
       * Date at which the item will be used. Target date does not necessarily equal the redemption date. Credits are redeemed immediately.
       * This date is only used for validations that may be performed by Policy providers
       */
      targetDate?: Date;
      /** Idempotency key */
      idempotencyKey: string;
      /** Additional info */
      additionalData?: Record<string, any> | null;
      /** Beneficiary of the entitlement. If not provided, will use the identity in the context */
      beneficiary?: IdentificationData$1;
  }
  interface ReserveEntitlementResponse {
      /** Id of the transaction that was created as a result of this request */
      transactionId?: string;
  }
  interface EntitlementReserved {
      /** Entitlement which was used to perform this transaction */
      entitlement?: Entitlement;
      /** Details of the redemption */
      redemptionDetails?: RedemptionDetails;
  }
  interface CancelEntitlementReservationRequest {
      /** Id of the transaction that was created as a result of this request */
      transactionId: string;
  }
  interface CancelEntitlementReservationResponse {
      /** Id of the transaction that was created as a result of this request */
      transactionId?: string;
  }
  interface EntitlementReservationCanceled {
      /** Entitlement which was used to perform this transaction */
      entitlement?: Entitlement;
      /** Id of the canceled reservation transaction */
      transactionId?: string;
  }
  interface ReleaseEntitlementReservationRequest {
      /** Id of the transaction that was created as a result of this request */
      transactionId: string;
  }
  interface ReleaseEntitlementReservationResponse {
      /** Id of the transaction that was created as a result of this request */
      transactionId?: string;
  }
  interface EntitlementReservationReleased {
      /** Entitlement which was used to perform this transaction */
      entitlement?: Entitlement;
      /** Id of the released reservation transaction */
      transactionId?: string;
  }
  interface CheckEntitlementEligibilityRequest {
      /** Id of the entitlement to check eligibility for */
      entitlementId: string;
      /** Reference of the item for which to check entitlement's eligibility */
      itemReference?: ItemReference;
      /** If provided it will force the redemption to be done from the specific benefit instead of the first eligible one */
      benefitKey?: string | null;
      /** Number of items to check eligibility for. This number if checked against the policies and credit pool of the entitlements */
      count?: number;
      /**
       * Date at which the item will be used. Target date does not necessarily equal the redemption date. Credits are redeemed immediately.
       * This date is only used for validations that may be performed by entitlement providers
       */
      targetDate?: Date;
      /** Additional info */
      additionalData?: Record<string, any> | null;
      /** Beneficiary of the entitlement. If not provided, will use the identity in the context */
      beneficiary?: IdentificationData$1;
  }
  interface CheckEntitlementEligibilityResponse {
      /** The result of the eligibility check. Indicates whether the entitlement is eligible for redemption, and if not, returns the reason */
      result?: EligibilityCheckResult;
  }
  enum EligibilityCheckResult {
      UNKNOWN = "UNKNOWN",
      ELIGIBLE = "ELIGIBLE",
      NOT_ENOUGH_BALANCE = "NOT_ENOUGH_BALANCE",
      POLICY_EXPRESSION_EVALUATED_TO_FALSE = "POLICY_EXPRESSION_EVALUATED_TO_FALSE",
      ENTITLEMENT_NOT_ACTIVE = "ENTITLEMENT_NOT_ACTIVE"
  }
  /** TODO provide a bulk version of this endpoint */
  interface GetEligibleEntitlementsRequest {
      /** Reference of the item for which all eligible entitlements will be returned */
      itemReference?: ItemReference;
      /** Number of items to check eligibility for. This number is checked against the policies and credit pool of the entitlements */
      count?: number;
      /**
       * Date at which the item will be used. Target date does not necessarily equal the redemption date. Credits are redeemed immediately.
       * This date is only used for validations that may be performed by entitlement providers
       */
      targetDate?: Date;
      /** Additional info */
      additionalData?: Record<string, any> | null;
      /** Beneficiary of the entitlement. If not provided, will use the identity in the context */
      beneficiary?: IdentificationData$1;
  }
  interface GetEligibleEntitlementsResponse {
      /** Eligible benefits */
      eligibleBenefits?: EligibleBenefit[];
  }
  interface EligibleBenefit {
      /**
       * Entitlement ID
       * @readonly
       */
      entitlementId?: string;
      /** A unique identifier for the group. May be empty, but only one group can have an empty key */
      benefitKey?: string;
      /** Item reference */
      itemReference?: ItemReference;
      /** Price of the item expressed in credits */
      price?: string | null;
  }
  /**
   * Creates a new Entitlement
   *
   * This function is not a universal function and runs only on the backend.
   * @param entitlement - Entitlement to be created
   * @internal
   * @documentationMaturity preview
   * @requiredField entitlement
   * @adminMethod
   * @returns The created Entitlement
   */
  function createEntitlement(entitlement: Entitlement): Promise<Entitlement>;
  /**
   * Get an Entitlement by id
   *
   * This function is not a universal function and runs only on the backend.
   * @param entitlementId - Id of the Entitlement to retrieve
   * @internal
   * @documentationMaturity preview
   * @requiredField entitlementId
   * @adminMethod
   * @returns The retrieved Entitlement
   */
  function getEntitlement(entitlementId: string): Promise<Entitlement>;
  /**
   * Update an Entitlement, supports partial update
   * Pass the latest `revision` for a successful update
   *
   * This function is not a universal function and runs only on the backend.
   * @param _id - Entitlement ID
   * @internal
   * @documentationMaturity preview
   * @requiredField _id
   * @requiredField entitlement
   * @requiredField entitlement.revision
   * @adminMethod
   * @returns The updated Entitlement
   */
  function updateEntitlement(_id: string | null, entitlement: UpdateEntitlement, options?: UpdateEntitlementOptions): Promise<Entitlement>;
  interface UpdateEntitlement {
      /**
       * Entitlement ID
       * @readonly
       */
      _id?: string | null;
      /** Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision */
      revision?: string | null;
      /**
       * Represents the time this Entitlement was created
       * @readonly
       */
      _createdDate?: Date;
      /**
       * Represents the time this Entitlement was last updated
       * @readonly
       */
      _updatedDate?: Date;
      /**
       * Template that this entitlement was created from
       * @readonly
       */
      templateId?: string;
      /**
       * Template package from which this entitlement was provisioned from
       * @readonly
       */
      templatePackageId?: string | null;
      /**
       * Package that this entitlement belongs to
       * @readonly
       */
      packageId?: string;
      /**
       * Status of entitlement
       * @readonly
       */
      status?: EntitlementStatus;
      /** Who is getting the entitlement */
      beneficiary?: IdentificationData$1;
      /** Items and policies how the entitlement works */
      details?: EntitlementDetails;
      /**
       * Name of the entitlement template that this Entitlement was provisioned from
       * @readonly
       */
      name?: string;
      /**
       * ID of the app that this entitlement belongs to
       * @readonly
       */
      appId?: string;
  }
  interface UpdateEntitlementOptions {
      /**
       * Explicit list of fields to update
       * @internal
       */
      fieldMask?: string[];
  }
  /**
   * Delete an Entitlement
   *
   * This function is not a universal function and runs only on the backend.
   * @param entitlementId - Id of the Entitlement to delete
   * @internal
   * @documentationMaturity preview
   * @requiredField entitlementId
   * @adminMethod
   */
  function deleteEntitlement(entitlementId: string, options?: DeleteEntitlementOptions): Promise<void>;
  interface DeleteEntitlementOptions {
      /** The revision of the Entitlement */
      revision?: string;
  }
  /**
   * Provision entitlements from an individual template or a package of templates
   *
   * This function is not a universal function and runs only on the backend.
   * @param templateReference - Reference of the template that is used to provision the entitlements
   * @internal
   * @documentationMaturity preview
   * @requiredField options
   * @requiredField options.beneficiary
   * @requiredField options.packageId
   * @requiredField templateReference
   * @adminMethod
   */
  function provisionEntitlements(templateReference: EntitlementTemplateReference, options: ProvisionEntitlementsOptions): Promise<ProvisionEntitlementsResponse>;
  interface ProvisionEntitlementsOptions {
      /** The main beneficiary of the entitlement */
      beneficiary: IdentificationData$1;
      /** Package that the provisioned entitlement is part of */
      packageId: string;
  }
  /**
   * Grants the entitlements as defined in the entitlement template configuration.
   * Typically used if the entitlement is cyclical to renew the credit pool on new cycle
   *
   * This function is not a universal function and runs only on the backend.
   * @param packageId - Package of entitlements to grant. Package id should be the same that was used to provision entitlements.
   * @internal
   * @documentationMaturity preview
   * @requiredField packageId
   * @adminMethod
   */
  function grantEntitlement(packageId: string): Promise<GrantEntitlementResponse>;
  /**
   * Query Entitlements using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)
   *
   * This function is not a universal function and runs only on the backend.
   * @internal
   * @documentationMaturity preview
   * @adminMethod
   */
  function queryEntitlements(): EntitlementsQueryBuilder;
  interface QueryCursorResult$1 {
      cursors: Cursors$1;
      hasNext: () => boolean;
      hasPrev: () => boolean;
      length: number;
      pageSize: number;
  }
  interface EntitlementsQueryResult extends QueryCursorResult$1 {
      items: Entitlement[];
      query: EntitlementsQueryBuilder;
      next: () => Promise<EntitlementsQueryResult>;
      prev: () => Promise<EntitlementsQueryResult>;
  }
  interface EntitlementsQueryBuilder {
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      eq: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'templateId' | 'templatePackageId' | 'packageId' | 'status' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'details' | 'details.benefits.benefitKey' | 'details.benefits.items.id' | 'details.benefits.items.category' | 'details.benefits.items.name' | 'details.benefits.price' | 'details.benefits.policyExpression' | 'details.benefits.policyExpression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorAndOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorOrOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.policyOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.type' | 'details.benefits.policyExpression.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.type' | 'details.benefits.policyExpression.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.type' | 'details.benefits.policyExpression.policyOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.type' | 'details.benefits.policyExpression.policyOptions.customOptions' | 'details.benefits.policyExpression.policyOptions.customOptions.id' | 'details.benefits.policyExpression.policyOptions.customOptions.appId' | 'details.benefits.policyExpression.policyOptions.customOptions.additionalData' | 'details.benefits.policyExpression.policyOptions.type' | 'details.benefits.policyExpression.type' | 'details.benefits.additionalData' | 'details.creditConfiguration' | 'details.creditConfiguration.amount' | 'details.creditConfiguration.rollOver' | 'details.policyExpression' | 'details.policyExpression.operatorNotOptions' | 'details.policyExpression.operatorAndOptions' | 'details.policyExpression.operatorOrOptions' | 'details.policyExpression.policyOptions' | 'details.policyExpression.type' | 'details.additionalData' | 'details.provider' | 'details.provider.appId' | 'details.provider.type' | 'name' | 'appId', value: any) => EntitlementsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      ne: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'templateId' | 'templatePackageId' | 'packageId' | 'status' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'details' | 'details.benefits.benefitKey' | 'details.benefits.items.id' | 'details.benefits.items.category' | 'details.benefits.items.name' | 'details.benefits.price' | 'details.benefits.policyExpression' | 'details.benefits.policyExpression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorAndOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorOrOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.policyOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.type' | 'details.benefits.policyExpression.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.type' | 'details.benefits.policyExpression.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.type' | 'details.benefits.policyExpression.policyOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.type' | 'details.benefits.policyExpression.policyOptions.customOptions' | 'details.benefits.policyExpression.policyOptions.customOptions.id' | 'details.benefits.policyExpression.policyOptions.customOptions.appId' | 'details.benefits.policyExpression.policyOptions.customOptions.additionalData' | 'details.benefits.policyExpression.policyOptions.type' | 'details.benefits.policyExpression.type' | 'details.benefits.additionalData' | 'details.creditConfiguration' | 'details.creditConfiguration.amount' | 'details.creditConfiguration.rollOver' | 'details.policyExpression' | 'details.policyExpression.operatorNotOptions' | 'details.policyExpression.operatorAndOptions' | 'details.policyExpression.operatorOrOptions' | 'details.policyExpression.policyOptions' | 'details.policyExpression.type' | 'details.additionalData' | 'details.provider' | 'details.provider.appId' | 'details.provider.type' | 'name' | 'appId', value: any) => EntitlementsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      ge: (propertyName: 'revision' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times', value: any) => EntitlementsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      gt: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times', value: any) => EntitlementsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      le: (propertyName: 'revision' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times', value: any) => EntitlementsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      lt: (propertyName: 'revision' | '_createdDate' | '_updatedDate' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times', value: any) => EntitlementsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `string`.
       * @param string - String to compare against. Case-insensitive.
       * @documentationMaturity preview
       */
      startsWith: (propertyName: '_id' | 'templateId' | 'templatePackageId' | 'packageId' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'details.benefits.benefitKey' | 'details.benefits.items.id' | 'details.benefits.items.category' | 'details.benefits.items.name' | 'details.benefits.price' | 'details.benefits.policyExpression.policyOptions.customOptions.id' | 'details.benefits.policyExpression.policyOptions.customOptions.appId' | 'details.creditConfiguration.amount' | 'details.provider.appId' | 'details.provider.type' | 'name' | 'appId', value: string) => EntitlementsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `values`.
       * @param values - List of values to compare against.
       * @documentationMaturity preview
       */
      hasSome: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'templateId' | 'templatePackageId' | 'packageId' | 'status' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'details' | 'details.benefits.benefitKey' | 'details.benefits.items.id' | 'details.benefits.items.category' | 'details.benefits.items.name' | 'details.benefits.price' | 'details.benefits.policyExpression' | 'details.benefits.policyExpression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorAndOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorOrOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.policyOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.type' | 'details.benefits.policyExpression.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.type' | 'details.benefits.policyExpression.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.type' | 'details.benefits.policyExpression.policyOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.type' | 'details.benefits.policyExpression.policyOptions.customOptions' | 'details.benefits.policyExpression.policyOptions.customOptions.id' | 'details.benefits.policyExpression.policyOptions.customOptions.appId' | 'details.benefits.policyExpression.policyOptions.customOptions.additionalData' | 'details.benefits.policyExpression.policyOptions.type' | 'details.benefits.policyExpression.type' | 'details.benefits.additionalData' | 'details.creditConfiguration' | 'details.creditConfiguration.amount' | 'details.creditConfiguration.rollOver' | 'details.policyExpression' | 'details.policyExpression.operatorNotOptions' | 'details.policyExpression.operatorAndOptions' | 'details.policyExpression.operatorOrOptions' | 'details.policyExpression.policyOptions' | 'details.policyExpression.type' | 'details.additionalData' | 'details.provider' | 'details.provider.appId' | 'details.provider.type' | 'name' | 'appId', value: any[]) => EntitlementsQueryBuilder;
      /** @documentationMaturity preview */
      in: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'templateId' | 'templatePackageId' | 'packageId' | 'status' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'details' | 'details.benefits.benefitKey' | 'details.benefits.items.id' | 'details.benefits.items.category' | 'details.benefits.items.name' | 'details.benefits.price' | 'details.benefits.policyExpression' | 'details.benefits.policyExpression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorAndOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorOrOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.policyOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.type' | 'details.benefits.policyExpression.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.type' | 'details.benefits.policyExpression.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.type' | 'details.benefits.policyExpression.policyOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.type' | 'details.benefits.policyExpression.policyOptions.customOptions' | 'details.benefits.policyExpression.policyOptions.customOptions.id' | 'details.benefits.policyExpression.policyOptions.customOptions.appId' | 'details.benefits.policyExpression.policyOptions.customOptions.additionalData' | 'details.benefits.policyExpression.policyOptions.type' | 'details.benefits.policyExpression.type' | 'details.benefits.additionalData' | 'details.creditConfiguration' | 'details.creditConfiguration.amount' | 'details.creditConfiguration.rollOver' | 'details.policyExpression' | 'details.policyExpression.operatorNotOptions' | 'details.policyExpression.operatorAndOptions' | 'details.policyExpression.operatorOrOptions' | 'details.policyExpression.policyOptions' | 'details.policyExpression.type' | 'details.additionalData' | 'details.provider' | 'details.provider.appId' | 'details.provider.type' | 'name' | 'appId', value: any) => EntitlementsQueryBuilder;
      /** @documentationMaturity preview */
      exists: (propertyName: '_id' | 'revision' | '_createdDate' | '_updatedDate' | 'templateId' | 'templatePackageId' | 'packageId' | 'status' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'details' | 'details.benefits.benefitKey' | 'details.benefits.items.id' | 'details.benefits.items.category' | 'details.benefits.items.name' | 'details.benefits.price' | 'details.benefits.policyExpression' | 'details.benefits.policyExpression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorAndOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorOrOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.policyOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.type' | 'details.benefits.policyExpression.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.type' | 'details.benefits.policyExpression.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.type' | 'details.benefits.policyExpression.policyOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.type' | 'details.benefits.policyExpression.policyOptions.customOptions' | 'details.benefits.policyExpression.policyOptions.customOptions.id' | 'details.benefits.policyExpression.policyOptions.customOptions.appId' | 'details.benefits.policyExpression.policyOptions.customOptions.additionalData' | 'details.benefits.policyExpression.policyOptions.type' | 'details.benefits.policyExpression.type' | 'details.benefits.additionalData' | 'details.creditConfiguration' | 'details.creditConfiguration.amount' | 'details.creditConfiguration.rollOver' | 'details.policyExpression' | 'details.policyExpression.operatorNotOptions' | 'details.policyExpression.operatorAndOptions' | 'details.policyExpression.operatorOrOptions' | 'details.policyExpression.policyOptions' | 'details.policyExpression.type' | 'details.additionalData' | 'details.provider' | 'details.provider.appId' | 'details.provider.type' | 'name' | 'appId', value: boolean) => EntitlementsQueryBuilder;
      /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
       * @documentationMaturity preview
       */
      ascending: (...propertyNames: Array<'_id' | 'revision' | '_createdDate' | '_updatedDate' | 'templateId' | 'templatePackageId' | 'packageId' | 'status' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'beneficiary.identityType' | 'details' | 'details.benefits' | 'details.benefits.benefitKey' | 'details.benefits.items' | 'details.benefits.items.id' | 'details.benefits.items.category' | 'details.benefits.items.name' | 'details.benefits.price' | 'details.benefits.policyExpression' | 'details.benefits.policyExpression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorAndOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorOrOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.policyOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.type' | 'details.benefits.policyExpression.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.type' | 'details.benefits.policyExpression.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.type' | 'details.benefits.policyExpression.policyOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.type' | 'details.benefits.policyExpression.policyOptions.customOptions' | 'details.benefits.policyExpression.policyOptions.customOptions.id' | 'details.benefits.policyExpression.policyOptions.customOptions.appId' | 'details.benefits.policyExpression.policyOptions.customOptions.additionalData' | 'details.benefits.policyExpression.policyOptions.type' | 'details.benefits.policyExpression.type' | 'details.benefits.additionalData' | 'details.creditConfiguration' | 'details.creditConfiguration.amount' | 'details.creditConfiguration.rollOver' | 'details.policyExpression' | 'details.policyExpression.operatorNotOptions' | 'details.policyExpression.operatorAndOptions' | 'details.policyExpression.operatorOrOptions' | 'details.policyExpression.policyOptions' | 'details.policyExpression.type' | 'details.additionalData' | 'details.provider' | 'details.provider.appId' | 'details.provider.type' | 'name' | 'appId'>) => EntitlementsQueryBuilder;
      /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
       * @documentationMaturity preview
       */
      descending: (...propertyNames: Array<'_id' | 'revision' | '_createdDate' | '_updatedDate' | 'templateId' | 'templatePackageId' | 'packageId' | 'status' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'beneficiary.identityType' | 'details' | 'details.benefits' | 'details.benefits.benefitKey' | 'details.benefits.items' | 'details.benefits.items.id' | 'details.benefits.items.category' | 'details.benefits.items.name' | 'details.benefits.price' | 'details.benefits.policyExpression' | 'details.benefits.policyExpression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorNotOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorAndOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.operatorOrOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.policyOptions' | 'details.benefits.policyExpression.operatorNotOptions.expression.type' | 'details.benefits.policyExpression.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorAndOptions.expressions.type' | 'details.benefits.policyExpression.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorNotOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorAndOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.operatorOrOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.policyOptions' | 'details.benefits.policyExpression.operatorOrOptions.expressions.type' | 'details.benefits.policyExpression.policyOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toWeekDay' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toHour' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.fromMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.fixedIntervalOptions.toMinute' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.times' | 'details.benefits.policyExpression.policyOptions.rateLimitedOptions.type' | 'details.benefits.policyExpression.policyOptions.customOptions' | 'details.benefits.policyExpression.policyOptions.customOptions.id' | 'details.benefits.policyExpression.policyOptions.customOptions.appId' | 'details.benefits.policyExpression.policyOptions.customOptions.additionalData' | 'details.benefits.policyExpression.policyOptions.type' | 'details.benefits.policyExpression.type' | 'details.benefits.additionalData' | 'details.creditConfiguration' | 'details.creditConfiguration.amount' | 'details.creditConfiguration.rollOver' | 'details.policyExpression' | 'details.policyExpression.operatorNotOptions' | 'details.policyExpression.operatorAndOptions' | 'details.policyExpression.operatorOrOptions' | 'details.policyExpression.policyOptions' | 'details.policyExpression.type' | 'details.additionalData' | 'details.provider' | 'details.provider.appId' | 'details.provider.type' | 'name' | 'appId'>) => EntitlementsQueryBuilder;
      /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
       * @documentationMaturity preview
       */
      limit: (limit: number) => EntitlementsQueryBuilder;
      /** @param cursor - A pointer to specific record
       * @documentationMaturity preview
       */
      skipTo: (cursor: string) => EntitlementsQueryBuilder;
      /** @documentationMaturity preview */
      find: () => Promise<EntitlementsQueryResult>;
  }
  /**
   * Pauses the entitlements in the provided package. If the package contains service type entitlements, the services will be paused.
   *
   * This function is not a universal function and runs only on the backend.
   * @param packageId - Package of entitlements
   * @internal
   * @documentationMaturity preview
   * @requiredField packageId
   * @adminMethod
   */
  function pauseEntitlement(packageId: string): Promise<PauseEntitlementResponse>;
  /**
   * Resumes the entitlements in the provided package. If the package contains service type entitlements, the services will be resumed.
   *
   * This function is not a universal function and runs only on the backend.
   * @param packageId - Package of entitlements
   * @internal
   * @documentationMaturity preview
   * @requiredField packageId
   * @adminMethod
   */
  function resumeEntitlement(packageId: string): Promise<ResumeEntitlementResponse>;
  /**
   * Ends the entitlements in the provided package. If the package contains service type entitlements, the services will be paused.
   *
   * This function is not a universal function and runs only on the backend.
   * @param packageId - Package of entitlements
   * @internal
   * @documentationMaturity preview
   * @requiredField packageId
   * @adminMethod
   */
  function endEntitlement(packageId: string): Promise<EndEntitlementResponse>;
  /**
   * Redeems the requested number of credits for one specific item
   *
   * This function is not a universal function and runs only on the backend.
   * @param entitlementId - Id of the entitlement that is being redeemed from
   * @internal
   * @documentationMaturity preview
   * @requiredField entitlementId
   * @requiredField options.idempotencyKey
   * @requiredField options.itemReference._id
   * @adminMethod
   */
  function redeemEntitlement(entitlementId: string, options?: RedeemEntitlementOptions): Promise<RedeemEntitlementResponse>;
  interface RedeemEntitlementOptions {
      /** Reference of the item that is being redeemed */
      itemReference?: ItemReference;
      /** If provided it will force the redemption to be done from the specific benefit instead of the first eligible one */
      benefitKey?: string | null;
      /** Number of of items to redeem */
      count?: number;
      /**
       * Date at which the item will be used. Target date does not necessarily equal the redemption date. Credits are redeemed immediately.
       * This date is only used for validations that may be performed by policy providers
       */
      targetDate?: Date;
      /** Idempotency key */
      idempotencyKey: string;
      /** Additional info */
      additionalData?: Record<string, any> | null;
      /** Beneficiary of the entitlement. If not provided, will use the identity in the context */
      beneficiary?: IdentificationData$1;
  }
  /**
   * Performed as two-part redemption
   *
   * This function is not a universal function and runs only on the backend.
   * @param entitlementId - Id of the entitlement that is being redeemed from
   * @internal
   * @documentationMaturity preview
   * @requiredField entitlementId
   * @requiredField options.idempotencyKey
   * @requiredField options.itemReference._id
   * @adminMethod
   */
  function reserveEntitlement(entitlementId: string, options?: ReserveEntitlementOptions): Promise<ReserveEntitlementResponse>;
  interface ReserveEntitlementOptions {
      /** Reference of the item that is being redeemed */
      itemReference?: ItemReference;
      /** If provided it will force the redemption to be done from the specific benefit instead of the first eligible one */
      benefitKey?: string | null;
      /** Number of items to redeem */
      count?: number;
      /**
       * Date at which the item will be used. Target date does not necessarily equal the redemption date. Credits are redeemed immediately.
       * This date is only used for validations that may be performed by Policy providers
       */
      targetDate?: Date;
      /** Idempotency key */
      idempotencyKey: string;
      /** Additional info */
      additionalData?: Record<string, any> | null;
      /** Beneficiary of the entitlement. If not provided, will use the identity in the context */
      beneficiary?: IdentificationData$1;
  }
  /**
   * Performed as two-part redemption
   *
   * This function is not a universal function and runs only on the backend.
   * @param transactionId - Id of the transaction that was created as a result of this request
   * @internal
   * @documentationMaturity preview
   * @requiredField transactionId
   * @adminMethod
   */
  function cancelEntitlementReservation(transactionId: string): Promise<CancelEntitlementReservationResponse>;
  /**
   * Performed as two-part redemption
   *
   * This function is not a universal function and runs only on the backend.
   * @param transactionId - Id of the transaction that was created as a result of this request
   * @internal
   * @documentationMaturity preview
   * @requiredField transactionId
   * @adminMethod
   */
  function releaseEntitlementReservation(transactionId: string): Promise<ReleaseEntitlementReservationResponse>;
  /**
   * Performed as part of redemption, but can be called on its own
   *
   * This function is not a universal function and runs only on the backend.
   * @param entitlementId - Id of the entitlement to check eligibility for
   * @internal
   * @documentationMaturity preview
   * @requiredField entitlementId
   * @requiredField options.itemReference._id
   * @adminMethod
   */
  function checkEntitlementEligibility(entitlementId: string, options?: CheckEntitlementEligibilityOptions): Promise<CheckEntitlementEligibilityResponse>;
  interface CheckEntitlementEligibilityOptions {
      /** Reference of the item for which to check entitlement's eligibility */
      itemReference?: ItemReference;
      /** If provided it will force the redemption to be done from the specific benefit instead of the first eligible one */
      benefitKey?: string | null;
      /** Number of items to check eligibility for. This number if checked against the policies and credit pool of the entitlements */
      count?: number;
      /**
       * Date at which the item will be used. Target date does not necessarily equal the redemption date. Credits are redeemed immediately.
       * This date is only used for validations that may be performed by entitlement providers
       */
      targetDate?: Date;
      /** Additional info */
      additionalData?: Record<string, any> | null;
      /** Beneficiary of the entitlement. If not provided, will use the identity in the context */
      beneficiary?: IdentificationData$1;
  }
  /**
   * Performed as part of redemption, but can be called on its own
   *
   * This function is not a universal function and runs only on the backend.
   * @internal
   * @documentationMaturity preview
   * @requiredField options.itemReference._id
   * @adminMethod
   */
  function getEligibleEntitlements(options?: GetEligibleEntitlementsOptions): Promise<GetEligibleEntitlementsResponse>;
  interface GetEligibleEntitlementsOptions {
      /** Reference of the item for which all eligible entitlements will be returned */
      itemReference?: ItemReference;
      /** Number of items to check eligibility for. This number is checked against the policies and credit pool of the entitlements */
      count?: number;
      /**
       * Date at which the item will be used. Target date does not necessarily equal the redemption date. Credits are redeemed immediately.
       * This date is only used for validations that may be performed by entitlement providers
       */
      targetDate?: Date;
      /** Additional info */
      additionalData?: Record<string, any> | null;
      /** Beneficiary of the entitlement. If not provided, will use the identity in the context */
      beneficiary?: IdentificationData$1;
  }
  
  type entitlementsV1Entitlement_universal_d_Entitlement = Entitlement;
  type entitlementsV1Entitlement_universal_d_EntitlementStatus = EntitlementStatus;
  const entitlementsV1Entitlement_universal_d_EntitlementStatus: typeof EntitlementStatus;
  type entitlementsV1Entitlement_universal_d_EntitlementDetails = EntitlementDetails;
  type entitlementsV1Entitlement_universal_d_Benefit = Benefit;
  type entitlementsV1Entitlement_universal_d_Item = Item;
  type entitlementsV1Entitlement_universal_d_PolicyExpression = PolicyExpression;
  type entitlementsV1Entitlement_universal_d_PolicyExpressionExpressionOneOf = PolicyExpressionExpressionOneOf;
  type entitlementsV1Entitlement_universal_d_PolicyExpressionType = PolicyExpressionType;
  const entitlementsV1Entitlement_universal_d_PolicyExpressionType: typeof PolicyExpressionType;
  type entitlementsV1Entitlement_universal_d_PolicyExpressionNot = PolicyExpressionNot;
  type entitlementsV1Entitlement_universal_d_PolicyExpressionAnd = PolicyExpressionAnd;
  type entitlementsV1Entitlement_universal_d_PolicyExpressionOr = PolicyExpressionOr;
  type entitlementsV1Entitlement_universal_d_Policy = Policy;
  type entitlementsV1Entitlement_universal_d_PolicyPolicyOneOf = PolicyPolicyOneOf;
  type entitlementsV1Entitlement_universal_d_Type = Type;
  const entitlementsV1Entitlement_universal_d_Type: typeof Type;
  type entitlementsV1Entitlement_universal_d_FixedIntervalPolicy = FixedIntervalPolicy;
  type entitlementsV1Entitlement_universal_d_WeekDay = WeekDay;
  const entitlementsV1Entitlement_universal_d_WeekDay: typeof WeekDay;
  type entitlementsV1Entitlement_universal_d_RateLimitedPolicy = RateLimitedPolicy;
  type entitlementsV1Entitlement_universal_d_RateLimitedPolicyPeriodOneOf = RateLimitedPolicyPeriodOneOf;
  type entitlementsV1Entitlement_universal_d_RateLimitedPolicyType = RateLimitedPolicyType;
  const entitlementsV1Entitlement_universal_d_RateLimitedPolicyType: typeof RateLimitedPolicyType;
  type entitlementsV1Entitlement_universal_d_CustomPolicy = CustomPolicy;
  type entitlementsV1Entitlement_universal_d_CreditConfiguration = CreditConfiguration;
  type entitlementsV1Entitlement_universal_d_Provider = Provider;
  type entitlementsV1Entitlement_universal_d_CreateEntitlementRequest = CreateEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_CreateEntitlementResponse = CreateEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_GetEntitlementRequest = GetEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_GetEntitlementResponse = GetEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_UpdateEntitlementRequest = UpdateEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_UpdateEntitlementResponse = UpdateEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_DeleteEntitlementRequest = DeleteEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_DeleteEntitlementResponse = DeleteEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_ProvisionEntitlementsRequest = ProvisionEntitlementsRequest;
  type entitlementsV1Entitlement_universal_d_EntitlementTemplateReference = EntitlementTemplateReference;
  type entitlementsV1Entitlement_universal_d_EntitlementTemplateReferenceIdOneOf = EntitlementTemplateReferenceIdOneOf;
  type entitlementsV1Entitlement_universal_d_ProvisionEntitlementsResponse = ProvisionEntitlementsResponse;
  type entitlementsV1Entitlement_universal_d_PackageAlreadyExists = PackageAlreadyExists;
  type entitlementsV1Entitlement_universal_d_GrantEntitlementRequest = GrantEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_GrantEntitlementResponse = GrantEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_EntitlementGranted = EntitlementGranted;
  type entitlementsV1Entitlement_universal_d_QueryEntitlementsRequest = QueryEntitlementsRequest;
  type entitlementsV1Entitlement_universal_d_QueryEntitlementsResponse = QueryEntitlementsResponse;
  type entitlementsV1Entitlement_universal_d_PauseEntitlementRequest = PauseEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_PauseEntitlementResponse = PauseEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_EntitlementPaused = EntitlementPaused;
  type entitlementsV1Entitlement_universal_d_ResumeEntitlementRequest = ResumeEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_ResumeEntitlementResponse = ResumeEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_EntitlementResumed = EntitlementResumed;
  type entitlementsV1Entitlement_universal_d_EndEntitlementRequest = EndEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_EndEntitlementResponse = EndEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_EntitlementEnded = EntitlementEnded;
  type entitlementsV1Entitlement_universal_d_RedeemEntitlementRequest = RedeemEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_ItemReference = ItemReference;
  type entitlementsV1Entitlement_universal_d_RedeemEntitlementResponse = RedeemEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_EntitlementRedeemed = EntitlementRedeemed;
  type entitlementsV1Entitlement_universal_d_RedemptionDetails = RedemptionDetails;
  type entitlementsV1Entitlement_universal_d_NotEnoughBalance = NotEnoughBalance;
  type entitlementsV1Entitlement_universal_d_PolicyExpressionEvaluatedToFalse = PolicyExpressionEvaluatedToFalse;
  type entitlementsV1Entitlement_universal_d_EntitlementNotActive = EntitlementNotActive;
  type entitlementsV1Entitlement_universal_d_EntitlementAlreadyRedeemed = EntitlementAlreadyRedeemed;
  type entitlementsV1Entitlement_universal_d_ReserveEntitlementRequest = ReserveEntitlementRequest;
  type entitlementsV1Entitlement_universal_d_ReserveEntitlementResponse = ReserveEntitlementResponse;
  type entitlementsV1Entitlement_universal_d_EntitlementReserved = EntitlementReserved;
  type entitlementsV1Entitlement_universal_d_CancelEntitlementReservationRequest = CancelEntitlementReservationRequest;
  type entitlementsV1Entitlement_universal_d_CancelEntitlementReservationResponse = CancelEntitlementReservationResponse;
  type entitlementsV1Entitlement_universal_d_EntitlementReservationCanceled = EntitlementReservationCanceled;
  type entitlementsV1Entitlement_universal_d_ReleaseEntitlementReservationRequest = ReleaseEntitlementReservationRequest;
  type entitlementsV1Entitlement_universal_d_ReleaseEntitlementReservationResponse = ReleaseEntitlementReservationResponse;
  type entitlementsV1Entitlement_universal_d_EntitlementReservationReleased = EntitlementReservationReleased;
  type entitlementsV1Entitlement_universal_d_CheckEntitlementEligibilityRequest = CheckEntitlementEligibilityRequest;
  type entitlementsV1Entitlement_universal_d_CheckEntitlementEligibilityResponse = CheckEntitlementEligibilityResponse;
  type entitlementsV1Entitlement_universal_d_EligibilityCheckResult = EligibilityCheckResult;
  const entitlementsV1Entitlement_universal_d_EligibilityCheckResult: typeof EligibilityCheckResult;
  type entitlementsV1Entitlement_universal_d_GetEligibleEntitlementsRequest = GetEligibleEntitlementsRequest;
  type entitlementsV1Entitlement_universal_d_GetEligibleEntitlementsResponse = GetEligibleEntitlementsResponse;
  type entitlementsV1Entitlement_universal_d_EligibleBenefit = EligibleBenefit;
  const entitlementsV1Entitlement_universal_d_createEntitlement: typeof createEntitlement;
  const entitlementsV1Entitlement_universal_d_getEntitlement: typeof getEntitlement;
  const entitlementsV1Entitlement_universal_d_updateEntitlement: typeof updateEntitlement;
  type entitlementsV1Entitlement_universal_d_UpdateEntitlement = UpdateEntitlement;
  type entitlementsV1Entitlement_universal_d_UpdateEntitlementOptions = UpdateEntitlementOptions;
  const entitlementsV1Entitlement_universal_d_deleteEntitlement: typeof deleteEntitlement;
  type entitlementsV1Entitlement_universal_d_DeleteEntitlementOptions = DeleteEntitlementOptions;
  const entitlementsV1Entitlement_universal_d_provisionEntitlements: typeof provisionEntitlements;
  type entitlementsV1Entitlement_universal_d_ProvisionEntitlementsOptions = ProvisionEntitlementsOptions;
  const entitlementsV1Entitlement_universal_d_grantEntitlement: typeof grantEntitlement;
  const entitlementsV1Entitlement_universal_d_queryEntitlements: typeof queryEntitlements;
  type entitlementsV1Entitlement_universal_d_EntitlementsQueryResult = EntitlementsQueryResult;
  type entitlementsV1Entitlement_universal_d_EntitlementsQueryBuilder = EntitlementsQueryBuilder;
  const entitlementsV1Entitlement_universal_d_pauseEntitlement: typeof pauseEntitlement;
  const entitlementsV1Entitlement_universal_d_resumeEntitlement: typeof resumeEntitlement;
  const entitlementsV1Entitlement_universal_d_endEntitlement: typeof endEntitlement;
  const entitlementsV1Entitlement_universal_d_redeemEntitlement: typeof redeemEntitlement;
  type entitlementsV1Entitlement_universal_d_RedeemEntitlementOptions = RedeemEntitlementOptions;
  const entitlementsV1Entitlement_universal_d_reserveEntitlement: typeof reserveEntitlement;
  type entitlementsV1Entitlement_universal_d_ReserveEntitlementOptions = ReserveEntitlementOptions;
  const entitlementsV1Entitlement_universal_d_cancelEntitlementReservation: typeof cancelEntitlementReservation;
  const entitlementsV1Entitlement_universal_d_releaseEntitlementReservation: typeof releaseEntitlementReservation;
  const entitlementsV1Entitlement_universal_d_checkEntitlementEligibility: typeof checkEntitlementEligibility;
  type entitlementsV1Entitlement_universal_d_CheckEntitlementEligibilityOptions = CheckEntitlementEligibilityOptions;
  const entitlementsV1Entitlement_universal_d_getEligibleEntitlements: typeof getEligibleEntitlements;
  type entitlementsV1Entitlement_universal_d_GetEligibleEntitlementsOptions = GetEligibleEntitlementsOptions;
  namespace entitlementsV1Entitlement_universal_d {
    export {
      __debug$1 as __debug,
      entitlementsV1Entitlement_universal_d_Entitlement as Entitlement,
      entitlementsV1Entitlement_universal_d_EntitlementStatus as EntitlementStatus,
      IdentificationData$1 as IdentificationData,
      IdentificationDataIdOneOf$1 as IdentificationDataIdOneOf,
      IdentityType$1 as IdentityType,
      entitlementsV1Entitlement_universal_d_EntitlementDetails as EntitlementDetails,
      entitlementsV1Entitlement_universal_d_Benefit as Benefit,
      entitlementsV1Entitlement_universal_d_Item as Item,
      entitlementsV1Entitlement_universal_d_PolicyExpression as PolicyExpression,
      entitlementsV1Entitlement_universal_d_PolicyExpressionExpressionOneOf as PolicyExpressionExpressionOneOf,
      entitlementsV1Entitlement_universal_d_PolicyExpressionType as PolicyExpressionType,
      entitlementsV1Entitlement_universal_d_PolicyExpressionNot as PolicyExpressionNot,
      entitlementsV1Entitlement_universal_d_PolicyExpressionAnd as PolicyExpressionAnd,
      entitlementsV1Entitlement_universal_d_PolicyExpressionOr as PolicyExpressionOr,
      entitlementsV1Entitlement_universal_d_Policy as Policy,
      entitlementsV1Entitlement_universal_d_PolicyPolicyOneOf as PolicyPolicyOneOf,
      entitlementsV1Entitlement_universal_d_Type as Type,
      entitlementsV1Entitlement_universal_d_FixedIntervalPolicy as FixedIntervalPolicy,
      entitlementsV1Entitlement_universal_d_WeekDay as WeekDay,
      entitlementsV1Entitlement_universal_d_RateLimitedPolicy as RateLimitedPolicy,
      entitlementsV1Entitlement_universal_d_RateLimitedPolicyPeriodOneOf as RateLimitedPolicyPeriodOneOf,
      entitlementsV1Entitlement_universal_d_RateLimitedPolicyType as RateLimitedPolicyType,
      entitlementsV1Entitlement_universal_d_CustomPolicy as CustomPolicy,
      entitlementsV1Entitlement_universal_d_CreditConfiguration as CreditConfiguration,
      entitlementsV1Entitlement_universal_d_Provider as Provider,
      entitlementsV1Entitlement_universal_d_CreateEntitlementRequest as CreateEntitlementRequest,
      entitlementsV1Entitlement_universal_d_CreateEntitlementResponse as CreateEntitlementResponse,
      entitlementsV1Entitlement_universal_d_GetEntitlementRequest as GetEntitlementRequest,
      entitlementsV1Entitlement_universal_d_GetEntitlementResponse as GetEntitlementResponse,
      entitlementsV1Entitlement_universal_d_UpdateEntitlementRequest as UpdateEntitlementRequest,
      entitlementsV1Entitlement_universal_d_UpdateEntitlementResponse as UpdateEntitlementResponse,
      entitlementsV1Entitlement_universal_d_DeleteEntitlementRequest as DeleteEntitlementRequest,
      entitlementsV1Entitlement_universal_d_DeleteEntitlementResponse as DeleteEntitlementResponse,
      entitlementsV1Entitlement_universal_d_ProvisionEntitlementsRequest as ProvisionEntitlementsRequest,
      entitlementsV1Entitlement_universal_d_EntitlementTemplateReference as EntitlementTemplateReference,
      entitlementsV1Entitlement_universal_d_EntitlementTemplateReferenceIdOneOf as EntitlementTemplateReferenceIdOneOf,
      entitlementsV1Entitlement_universal_d_ProvisionEntitlementsResponse as ProvisionEntitlementsResponse,
      entitlementsV1Entitlement_universal_d_PackageAlreadyExists as PackageAlreadyExists,
      entitlementsV1Entitlement_universal_d_GrantEntitlementRequest as GrantEntitlementRequest,
      entitlementsV1Entitlement_universal_d_GrantEntitlementResponse as GrantEntitlementResponse,
      entitlementsV1Entitlement_universal_d_EntitlementGranted as EntitlementGranted,
      entitlementsV1Entitlement_universal_d_QueryEntitlementsRequest as QueryEntitlementsRequest,
      CursorQuery$1 as CursorQuery,
      CursorQueryPagingMethodOneOf$1 as CursorQueryPagingMethodOneOf,
      Sorting$1 as Sorting,
      SortOrder$1 as SortOrder,
      CursorPaging$1 as CursorPaging,
      entitlementsV1Entitlement_universal_d_QueryEntitlementsResponse as QueryEntitlementsResponse,
      CursorPagingMetadata$1 as CursorPagingMetadata,
      Cursors$1 as Cursors,
      entitlementsV1Entitlement_universal_d_PauseEntitlementRequest as PauseEntitlementRequest,
      entitlementsV1Entitlement_universal_d_PauseEntitlementResponse as PauseEntitlementResponse,
      entitlementsV1Entitlement_universal_d_EntitlementPaused as EntitlementPaused,
      entitlementsV1Entitlement_universal_d_ResumeEntitlementRequest as ResumeEntitlementRequest,
      entitlementsV1Entitlement_universal_d_ResumeEntitlementResponse as ResumeEntitlementResponse,
      entitlementsV1Entitlement_universal_d_EntitlementResumed as EntitlementResumed,
      entitlementsV1Entitlement_universal_d_EndEntitlementRequest as EndEntitlementRequest,
      entitlementsV1Entitlement_universal_d_EndEntitlementResponse as EndEntitlementResponse,
      entitlementsV1Entitlement_universal_d_EntitlementEnded as EntitlementEnded,
      entitlementsV1Entitlement_universal_d_RedeemEntitlementRequest as RedeemEntitlementRequest,
      entitlementsV1Entitlement_universal_d_ItemReference as ItemReference,
      entitlementsV1Entitlement_universal_d_RedeemEntitlementResponse as RedeemEntitlementResponse,
      entitlementsV1Entitlement_universal_d_EntitlementRedeemed as EntitlementRedeemed,
      entitlementsV1Entitlement_universal_d_RedemptionDetails as RedemptionDetails,
      entitlementsV1Entitlement_universal_d_NotEnoughBalance as NotEnoughBalance,
      entitlementsV1Entitlement_universal_d_PolicyExpressionEvaluatedToFalse as PolicyExpressionEvaluatedToFalse,
      entitlementsV1Entitlement_universal_d_EntitlementNotActive as EntitlementNotActive,
      entitlementsV1Entitlement_universal_d_EntitlementAlreadyRedeemed as EntitlementAlreadyRedeemed,
      entitlementsV1Entitlement_universal_d_ReserveEntitlementRequest as ReserveEntitlementRequest,
      entitlementsV1Entitlement_universal_d_ReserveEntitlementResponse as ReserveEntitlementResponse,
      entitlementsV1Entitlement_universal_d_EntitlementReserved as EntitlementReserved,
      entitlementsV1Entitlement_universal_d_CancelEntitlementReservationRequest as CancelEntitlementReservationRequest,
      entitlementsV1Entitlement_universal_d_CancelEntitlementReservationResponse as CancelEntitlementReservationResponse,
      entitlementsV1Entitlement_universal_d_EntitlementReservationCanceled as EntitlementReservationCanceled,
      entitlementsV1Entitlement_universal_d_ReleaseEntitlementReservationRequest as ReleaseEntitlementReservationRequest,
      entitlementsV1Entitlement_universal_d_ReleaseEntitlementReservationResponse as ReleaseEntitlementReservationResponse,
      entitlementsV1Entitlement_universal_d_EntitlementReservationReleased as EntitlementReservationReleased,
      entitlementsV1Entitlement_universal_d_CheckEntitlementEligibilityRequest as CheckEntitlementEligibilityRequest,
      entitlementsV1Entitlement_universal_d_CheckEntitlementEligibilityResponse as CheckEntitlementEligibilityResponse,
      entitlementsV1Entitlement_universal_d_EligibilityCheckResult as EligibilityCheckResult,
      entitlementsV1Entitlement_universal_d_GetEligibleEntitlementsRequest as GetEligibleEntitlementsRequest,
      entitlementsV1Entitlement_universal_d_GetEligibleEntitlementsResponse as GetEligibleEntitlementsResponse,
      entitlementsV1Entitlement_universal_d_EligibleBenefit as EligibleBenefit,
      entitlementsV1Entitlement_universal_d_createEntitlement as createEntitlement,
      entitlementsV1Entitlement_universal_d_getEntitlement as getEntitlement,
      entitlementsV1Entitlement_universal_d_updateEntitlement as updateEntitlement,
      entitlementsV1Entitlement_universal_d_UpdateEntitlement as UpdateEntitlement,
      entitlementsV1Entitlement_universal_d_UpdateEntitlementOptions as UpdateEntitlementOptions,
      entitlementsV1Entitlement_universal_d_deleteEntitlement as deleteEntitlement,
      entitlementsV1Entitlement_universal_d_DeleteEntitlementOptions as DeleteEntitlementOptions,
      entitlementsV1Entitlement_universal_d_provisionEntitlements as provisionEntitlements,
      entitlementsV1Entitlement_universal_d_ProvisionEntitlementsOptions as ProvisionEntitlementsOptions,
      entitlementsV1Entitlement_universal_d_grantEntitlement as grantEntitlement,
      entitlementsV1Entitlement_universal_d_queryEntitlements as queryEntitlements,
      entitlementsV1Entitlement_universal_d_EntitlementsQueryResult as EntitlementsQueryResult,
      entitlementsV1Entitlement_universal_d_EntitlementsQueryBuilder as EntitlementsQueryBuilder,
      entitlementsV1Entitlement_universal_d_pauseEntitlement as pauseEntitlement,
      entitlementsV1Entitlement_universal_d_resumeEntitlement as resumeEntitlement,
      entitlementsV1Entitlement_universal_d_endEntitlement as endEntitlement,
      entitlementsV1Entitlement_universal_d_redeemEntitlement as redeemEntitlement,
      entitlementsV1Entitlement_universal_d_RedeemEntitlementOptions as RedeemEntitlementOptions,
      entitlementsV1Entitlement_universal_d_reserveEntitlement as reserveEntitlement,
      entitlementsV1Entitlement_universal_d_ReserveEntitlementOptions as ReserveEntitlementOptions,
      entitlementsV1Entitlement_universal_d_cancelEntitlementReservation as cancelEntitlementReservation,
      entitlementsV1Entitlement_universal_d_releaseEntitlementReservation as releaseEntitlementReservation,
      entitlementsV1Entitlement_universal_d_checkEntitlementEligibility as checkEntitlementEligibility,
      entitlementsV1Entitlement_universal_d_CheckEntitlementEligibilityOptions as CheckEntitlementEligibilityOptions,
      entitlementsV1Entitlement_universal_d_getEligibleEntitlements as getEligibleEntitlements,
      entitlementsV1Entitlement_universal_d_GetEligibleEntitlementsOptions as GetEligibleEntitlementsOptions,
    };
  }
  
  const __debug: {
      verboseLogging: {
          on: () => boolean;
          off: () => boolean;
      };
  };
  interface Transaction {
      /** @readonly */
      _id?: string | null;
      /**
       * Represents the time the transaction was created
       * @readonly
       */
      _createdDate?: Date;
      /**
       * The entitlement from which the balance was changed
       * @readonly
       */
      poolId?: string;
      /**
       * The item for which the balance was changed, used only for records
       * @readonly
       */
      itemId?: string | null;
      /**
       * Amount to adjust the balance with. Can be negative.
       * @readonly
       */
      amount?: string;
      /**
       * The type defines different functionalities. Use DEBIT_AVAILABLE for normal balance debiting.
       * @readonly
       */
      type?: TransactionType;
      /**
       * Generated idempotency key from the client when making a change to the balance.
       * @readonly
       */
      idempotencyKey?: string;
      /**
       * Free format string
       * @readonly
       */
      reason?: string | null;
      /**
       * The identity that benefited from this transaction
       * @readonly
       */
      beneficiary?: IdentificationData;
      /**
       * Related transaction id. For example - for a reservation cancellation transaction, the related transaction is the redemption itself.
       * @readonly
       */
      relatedTransactionId?: string | null;
      /**
       * The identity that created this transaction
       * @readonly
       */
      instructingParty?: IdentificationData;
      /**
       * status of the transaction
       * @readonly
       */
      status?: TransactionStatus;
  }
  enum TransactionType {
      UNDEFINED = "UNDEFINED",
      /** Debits the AVAILABLE balance */
      DEBIT_AVAILABLE = "DEBIT_AVAILABLE",
      /** Moves the balance from AVAILABLE to RESERVED */
      RESERVE = "RESERVE",
      /** Debits the RESERVED balance */
      RELEASE_RESERVATION = "RELEASE_RESERVATION",
      /** Moves the balance back from RESERVED to AVAILABLE */
      CANCEL_RESERVATION = "CANCEL_RESERVATION",
      /** Credits the AVAILABLE balance */
      CREDIT_AVAILABLE = "CREDIT_AVAILABLE",
      /** Transaction type used for reporting free item usage */
      NO_CHANGE = "NO_CHANGE"
  }
  interface IdentificationData extends IdentificationDataIdOneOf {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
      /** ID of of a contact in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system. */
      contactId?: string | null;
      /**
       * @internal
       * @readonly
       */
      identityType?: IdentityType;
  }
  /** @oneof */
  interface IdentificationDataIdOneOf {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
  }
  enum IdentityType {
      UNKNOWN = "UNKNOWN",
      ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
      MEMBER = "MEMBER",
      WIX_USER = "WIX_USER",
      APP = "APP"
  }
  enum TransactionStatus {
      UNDEFINED = "UNDEFINED",
      /** Transaction is pending. This is the initial status of the transaction. Once the balance is updated, the transaction will become COMPLETED. If the balance update fails, the transaction will become FAILED. */
      PENDING = "PENDING",
      /** Transaction is completed */
      COMPLETED = "COMPLETED",
      /** Transaction is failed */
      FAILED = "FAILED"
  }
  interface GetTransactionRequest {
      /** Id of the transaction to retrieve */
      transactionId: string;
  }
  interface GetTransactionResponse {
      /** The retrieved transaction */
      transaction?: Transaction;
  }
  interface GetTransactionReversibilityRequest {
      /** Id of the transaction to get the reversibility */
      transactionId: string;
  }
  interface GetTransactionReversibilityResponse {
      /** The result of transaction reversibility validation */
      transactionReversibility?: TransactionReversibility;
  }
  /** Transaction reversibility results */
  enum TransactionReversibility {
      /** Transaction is allowed to be reverted */
      TRANSACTION_IS_REVERSIBLE = "TRANSACTION_IS_REVERSIBLE",
      /** Transaction isn't allowed to be reverted, because it was already reverted */
      TRANSACTION_ALREADY_REVERSED = "TRANSACTION_ALREADY_REVERSED",
      /** Transaction isn't allowed to be reverted, because the type transaction type doesn't allow this action */
      TRANSACTION_IS_NOT_REVERSIBLE = "TRANSACTION_IS_NOT_REVERSIBLE"
  }
  interface QueryTransactionsRequest {
      /** WQL expression */
      query: CursorQuery;
  }
  interface CursorQuery extends CursorQueryPagingMethodOneOf {
      /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
      cursorPaging?: CursorPaging;
      /**
       * Filter object in the following format:
       * `"filter" : {
       * "fieldName1": "value1",
       * "fieldName2":{"$operator":"value2"}
       * }`
       * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
       */
      filter?: Record<string, any> | null;
      /**
       * Sort object in the following format:
       * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
       */
      sort?: Sorting[];
  }
  /** @oneof */
  interface CursorQueryPagingMethodOneOf {
      /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
      cursorPaging?: CursorPaging;
  }
  interface Sorting {
      /** Name of the field to sort by. */
      fieldName?: string;
      /** Sort order. */
      order?: SortOrder;
  }
  enum SortOrder {
      ASC = "ASC",
      DESC = "DESC"
  }
  interface CursorPaging {
      /** Number of items to load. */
      limit?: number | null;
      /**
       * Pointer to the next or previous page in the list of results.
       *
       * You can get the relevant cursor token
       * from the `pagingMetadata` object in the previous call's response.
       * Not relevant for the first request.
       */
      cursor?: string | null;
  }
  interface QueryTransactionsResponse {
      /** The retrieved transactions */
      transactions?: Transaction[];
      /** Paging information */
      metadata?: CursorPagingMetadata;
  }
  interface CursorPagingMetadata {
      /** Number of items returned in the response. */
      count?: number | null;
      /** Offset that was requested. */
      cursors?: Cursors;
      /**
       * Indicates if there are more results after the current page.
       * If `true`, another page of results can be retrieved.
       * If `false`, this is the last page.
       */
      hasNext?: boolean | null;
  }
  interface Cursors {
      /** Cursor pointing to next page in the list of results. */
      next?: string | null;
      /** Cursor pointing to previous page in the list of results. */
      prev?: string | null;
  }
  /**
   * Get a transaction by id
   *
   * This function is not a universal function and runs only on the backend.
   * @param transactionId - Id of the transaction to retrieve
   * @internal
   * @documentationMaturity preview
   * @requiredField transactionId
   * @adminMethod
   * @returns The retrieved transaction
   */
  function getTransaction(transactionId: string): Promise<Transaction>;
  /**
   * Get a transaction reversibility by transaction id
   *
   * Should be always internal this is only used to support EcomMembershipSPI
   *
   * This function is not a universal function and runs only on the backend.
   * @param transactionId - Id of the transaction to get the reversibility
   * @internal
   * @documentationMaturity preview
   * @requiredField transactionId
   * @adminMethod
   */
  function getTransactionReversibility(transactionId: string): Promise<GetTransactionReversibilityResponse>;
  /**
   * Query transactions using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)
   *
   * This function is not a universal function and runs only on the backend.
   * @internal
   * @documentationMaturity preview
   * @adminMethod
   */
  function queryTransactions(): TransactionsQueryBuilder;
  interface QueryCursorResult {
      cursors: Cursors;
      hasNext: () => boolean;
      hasPrev: () => boolean;
      length: number;
      pageSize: number;
  }
  interface TransactionsQueryResult extends QueryCursorResult {
      items: Transaction[];
      query: TransactionsQueryBuilder;
      next: () => Promise<TransactionsQueryResult>;
      prev: () => Promise<TransactionsQueryResult>;
  }
  interface TransactionsQueryBuilder {
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      eq: (propertyName: '_id' | '_createdDate' | 'poolId' | 'itemId' | 'amount' | 'type' | 'idempotencyKey' | 'reason' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'relatedTransactionId' | 'instructingParty' | 'instructingParty.anonymousVisitorId' | 'instructingParty.memberId' | 'instructingParty.wixUserId' | 'instructingParty.appId' | 'instructingParty.contactId' | 'status', value: any) => TransactionsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      ne: (propertyName: '_id' | '_createdDate' | 'poolId' | 'itemId' | 'amount' | 'type' | 'idempotencyKey' | 'reason' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'relatedTransactionId' | 'instructingParty' | 'instructingParty.anonymousVisitorId' | 'instructingParty.memberId' | 'instructingParty.wixUserId' | 'instructingParty.appId' | 'instructingParty.contactId' | 'status', value: any) => TransactionsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      gt: (propertyName: '_createdDate', value: any) => TransactionsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `value`.
       * @param value - Value to compare against.
       * @documentationMaturity preview
       */
      lt: (propertyName: '_createdDate', value: any) => TransactionsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `string`.
       * @param string - String to compare against. Case-insensitive.
       * @documentationMaturity preview
       */
      startsWith: (propertyName: '_id' | 'poolId' | 'itemId' | 'amount' | 'idempotencyKey' | 'reason' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'relatedTransactionId' | 'instructingParty.anonymousVisitorId' | 'instructingParty.memberId' | 'instructingParty.wixUserId' | 'instructingParty.appId' | 'instructingParty.contactId', value: string) => TransactionsQueryBuilder;
      /** @param propertyName - Property whose value is compared with `values`.
       * @param values - List of values to compare against.
       * @documentationMaturity preview
       */
      hasSome: (propertyName: '_id' | '_createdDate' | 'poolId' | 'itemId' | 'amount' | 'type' | 'idempotencyKey' | 'reason' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'relatedTransactionId' | 'instructingParty' | 'instructingParty.anonymousVisitorId' | 'instructingParty.memberId' | 'instructingParty.wixUserId' | 'instructingParty.appId' | 'instructingParty.contactId' | 'status', value: any[]) => TransactionsQueryBuilder;
      /** @documentationMaturity preview */
      in: (propertyName: '_id' | '_createdDate' | 'poolId' | 'itemId' | 'amount' | 'type' | 'idempotencyKey' | 'reason' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'relatedTransactionId' | 'instructingParty' | 'instructingParty.anonymousVisitorId' | 'instructingParty.memberId' | 'instructingParty.wixUserId' | 'instructingParty.appId' | 'instructingParty.contactId' | 'status', value: any) => TransactionsQueryBuilder;
      /** @documentationMaturity preview */
      exists: (propertyName: '_id' | '_createdDate' | 'poolId' | 'itemId' | 'amount' | 'type' | 'idempotencyKey' | 'reason' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'relatedTransactionId' | 'instructingParty' | 'instructingParty.anonymousVisitorId' | 'instructingParty.memberId' | 'instructingParty.wixUserId' | 'instructingParty.appId' | 'instructingParty.contactId' | 'status', value: boolean) => TransactionsQueryBuilder;
      /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
       * @documentationMaturity preview
       */
      ascending: (...propertyNames: Array<'_id' | '_createdDate' | 'poolId' | 'itemId' | 'amount' | 'type' | 'idempotencyKey' | 'reason' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'beneficiary.identityType' | 'relatedTransactionId' | 'instructingParty' | 'instructingParty.anonymousVisitorId' | 'instructingParty.memberId' | 'instructingParty.wixUserId' | 'instructingParty.appId' | 'instructingParty.contactId' | 'instructingParty.identityType' | 'status'>) => TransactionsQueryBuilder;
      /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
       * @documentationMaturity preview
       */
      descending: (...propertyNames: Array<'_id' | '_createdDate' | 'poolId' | 'itemId' | 'amount' | 'type' | 'idempotencyKey' | 'reason' | 'beneficiary' | 'beneficiary.anonymousVisitorId' | 'beneficiary.memberId' | 'beneficiary.wixUserId' | 'beneficiary.appId' | 'beneficiary.contactId' | 'beneficiary.identityType' | 'relatedTransactionId' | 'instructingParty' | 'instructingParty.anonymousVisitorId' | 'instructingParty.memberId' | 'instructingParty.wixUserId' | 'instructingParty.appId' | 'instructingParty.contactId' | 'instructingParty.identityType' | 'status'>) => TransactionsQueryBuilder;
      /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
       * @documentationMaturity preview
       */
      limit: (limit: number) => TransactionsQueryBuilder;
      /** @param cursor - A pointer to specific record
       * @documentationMaturity preview
       */
      skipTo: (cursor: string) => TransactionsQueryBuilder;
      /** @documentationMaturity preview */
      find: () => Promise<TransactionsQueryResult>;
  }
  
  const entitlementsV1Transaction_universal_d___debug: typeof __debug;
  type entitlementsV1Transaction_universal_d_Transaction = Transaction;
  type entitlementsV1Transaction_universal_d_TransactionType = TransactionType;
  const entitlementsV1Transaction_universal_d_TransactionType: typeof TransactionType;
  type entitlementsV1Transaction_universal_d_IdentificationData = IdentificationData;
  type entitlementsV1Transaction_universal_d_IdentificationDataIdOneOf = IdentificationDataIdOneOf;
  type entitlementsV1Transaction_universal_d_IdentityType = IdentityType;
  const entitlementsV1Transaction_universal_d_IdentityType: typeof IdentityType;
  type entitlementsV1Transaction_universal_d_TransactionStatus = TransactionStatus;
  const entitlementsV1Transaction_universal_d_TransactionStatus: typeof TransactionStatus;
  type entitlementsV1Transaction_universal_d_GetTransactionRequest = GetTransactionRequest;
  type entitlementsV1Transaction_universal_d_GetTransactionResponse = GetTransactionResponse;
  type entitlementsV1Transaction_universal_d_GetTransactionReversibilityRequest = GetTransactionReversibilityRequest;
  type entitlementsV1Transaction_universal_d_GetTransactionReversibilityResponse = GetTransactionReversibilityResponse;
  type entitlementsV1Transaction_universal_d_TransactionReversibility = TransactionReversibility;
  const entitlementsV1Transaction_universal_d_TransactionReversibility: typeof TransactionReversibility;
  type entitlementsV1Transaction_universal_d_QueryTransactionsRequest = QueryTransactionsRequest;
  type entitlementsV1Transaction_universal_d_CursorQuery = CursorQuery;
  type entitlementsV1Transaction_universal_d_CursorQueryPagingMethodOneOf = CursorQueryPagingMethodOneOf;
  type entitlementsV1Transaction_universal_d_Sorting = Sorting;
  type entitlementsV1Transaction_universal_d_SortOrder = SortOrder;
  const entitlementsV1Transaction_universal_d_SortOrder: typeof SortOrder;
  type entitlementsV1Transaction_universal_d_CursorPaging = CursorPaging;
  type entitlementsV1Transaction_universal_d_QueryTransactionsResponse = QueryTransactionsResponse;
  type entitlementsV1Transaction_universal_d_CursorPagingMetadata = CursorPagingMetadata;
  type entitlementsV1Transaction_universal_d_Cursors = Cursors;
  const entitlementsV1Transaction_universal_d_getTransaction: typeof getTransaction;
  const entitlementsV1Transaction_universal_d_getTransactionReversibility: typeof getTransactionReversibility;
  const entitlementsV1Transaction_universal_d_queryTransactions: typeof queryTransactions;
  type entitlementsV1Transaction_universal_d_TransactionsQueryResult = TransactionsQueryResult;
  type entitlementsV1Transaction_universal_d_TransactionsQueryBuilder = TransactionsQueryBuilder;
  namespace entitlementsV1Transaction_universal_d {
    export {
      entitlementsV1Transaction_universal_d___debug as __debug,
      entitlementsV1Transaction_universal_d_Transaction as Transaction,
      entitlementsV1Transaction_universal_d_TransactionType as TransactionType,
      entitlementsV1Transaction_universal_d_IdentificationData as IdentificationData,
      entitlementsV1Transaction_universal_d_IdentificationDataIdOneOf as IdentificationDataIdOneOf,
      entitlementsV1Transaction_universal_d_IdentityType as IdentityType,
      entitlementsV1Transaction_universal_d_TransactionStatus as TransactionStatus,
      entitlementsV1Transaction_universal_d_GetTransactionRequest as GetTransactionRequest,
      entitlementsV1Transaction_universal_d_GetTransactionResponse as GetTransactionResponse,
      entitlementsV1Transaction_universal_d_GetTransactionReversibilityRequest as GetTransactionReversibilityRequest,
      entitlementsV1Transaction_universal_d_GetTransactionReversibilityResponse as GetTransactionReversibilityResponse,
      entitlementsV1Transaction_universal_d_TransactionReversibility as TransactionReversibility,
      entitlementsV1Transaction_universal_d_QueryTransactionsRequest as QueryTransactionsRequest,
      entitlementsV1Transaction_universal_d_CursorQuery as CursorQuery,
      entitlementsV1Transaction_universal_d_CursorQueryPagingMethodOneOf as CursorQueryPagingMethodOneOf,
      entitlementsV1Transaction_universal_d_Sorting as Sorting,
      entitlementsV1Transaction_universal_d_SortOrder as SortOrder,
      entitlementsV1Transaction_universal_d_CursorPaging as CursorPaging,
      entitlementsV1Transaction_universal_d_QueryTransactionsResponse as QueryTransactionsResponse,
      entitlementsV1Transaction_universal_d_CursorPagingMetadata as CursorPagingMetadata,
      entitlementsV1Transaction_universal_d_Cursors as Cursors,
      entitlementsV1Transaction_universal_d_getTransaction as getTransaction,
      entitlementsV1Transaction_universal_d_getTransactionReversibility as getTransactionReversibility,
      entitlementsV1Transaction_universal_d_queryTransactions as queryTransactions,
      entitlementsV1Transaction_universal_d_TransactionsQueryResult as TransactionsQueryResult,
      entitlementsV1Transaction_universal_d_TransactionsQueryBuilder as TransactionsQueryBuilder,
    };
  }
  
  export { entitlementsV1Balance_universal_d as balance, entitlementsV1Entitlement_universal_d as entitlements, entitlementsV1Transaction_universal_d as transaction };
}
